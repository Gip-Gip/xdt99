{"name":"xdt99","tagline":"TI 99 Cross-Development Tools","body":"xdt99: TI 99 Cross-Development Tools\r\n====================================\r\n\r\nThe **TI 99 Cross-Development Tools** (xdt99) are a small suite of programs that\r\nfacilitate the development of programs for the TI 99 family of home computers on\r\nmodern computer systems.\r\n\r\nAs of this release, the cross-development tools comprise\r\n\r\n * `xas99`, a TMS9900 cross-assembler, and\r\n * `xdm99`, a command-line disk manager for sector-based TI disk images.\r\n\r\nBoth programs are written in Python and thus run on any platform\r\nthat Python supports, including Linux, Windows, and Mac OS X.\r\n\r\nThe [xdt99 homepage][1] is hosted on GitHub.  You can download the latest\r\n[binary release][2] of xdt99 or clone the entire source code [repository][3].\r\n\r\nThe xdt99 tools complement similar projects such as the excellent [TI Image\r\nTool][5] or the [TI 99/Sim emulator][6] by offering slightly different\r\napproaches or extending their platform availability.\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nDownload the latest [binary release][2] from GitHub (recommended) or clone the\r\n[xdt99 repository][3].  Please note that the big download buttons on top of the\r\nxdt99 homepage on GitHub will include the entire repository; this is probably\r\n*not* what you want.\r\n\r\nYou will also need a working copy of [Python 2.x][4] installed on your computer.\r\n`xdt99` has been developed using Python 2.7, but other versions may work as\r\nwell.  Note, however, that compatibility with Python 3 has be postponed to a\r\nlater release for now.\r\n\r\nBoth the `xas99` cross-assembler and the `xdm99` disk manager are self-contained\r\nPython programs.  Simply place the files `xas99.py` and `xdm99.py` somewhere\r\ninto your `$PATH` or where your command-line interpreter will find them.\r\n\r\nThe `example` directory of the binary distribution contains some sample files\r\nthat are referenced throughout this manual.\r\n\r\n\r\nxas99 Cross-Assembler\r\n---------------------\r\n\r\nThe `xas99` cross-assembler translates TMS9900 assembly code into executable\r\nprograms for the TI 99 home computer equipped with the Editor/Assembler module\r\nor the Mini Memory module.\r\n\r\nInvoking `xas99` in standard mode will assemble a TMS9900 assembly source code\r\nfile into an object code file that may be loaded using the Editor/Assembler\r\nmodule option 3.\r\n\r\n    $ xas99.py -OR ashello.asm\r\n\r\n`xas99` can also produce program images files for the Editor/Assembler module\r\noption 5 or RPK cartridge files for the MESS emulator:\r\n\r\n\t$ xas99.py -OR -i ashello.asm\r\n\t$ xas99.py -OR -c ashello.asm\r\n\r\nAll existing assembly code for the TI 99, e.g., the Tombstone City source code\r\nshipped with the Editor/Assembler module, should cross-assemble using `xas99`\r\nwithout requiring any source code modifications.\r\n\r\nThe object code generated by `xas99` is identical to uncompressed object code\r\nproduced by the original TI Editor/Assembler package.  This includes all of its\r\nquirks, such as shortened object code lines or excessive address specifications,\r\nbut hopefully none of its bugs, such as invalid tags for certain `DEF`s.\r\n\r\nFor a detailed step-by-step example on how to cross-assemble and run an assembly\r\nprogram using the xdt99 tools and the MESS emulator please refer to the Example\r\nUsage section below.\r\n\r\nFinally, please note that even though the object code format of the TI 99 home\r\ncomputer shares many similarities with that of other TMS9900-based systems, most\r\nnotably the TI 990 mini computer, `xas99` currently targets the TI 99 only.\r\n\r\n\r\n### Assembling Source Code\r\n\r\nThe `xas99` cross-assembler reads an assembly source code file and generates an\r\nuncompressed object code file that is suitable for the original TI 99\r\nEditor/Assembler loader.\r\n\r\n\t$ xas99.py -OR ashello.asm\r\n\t$ xas99.py -OR ashello.asm -o HELLO-O\r\n\r\nThe output parameter `-o` may be used to override the default output file name.\r\n\r\nThe assembly options parameter `-O` tells `xas99` which Editor/Assembler options\r\nit should apply during assembly.  Currently, only option `R` (register symbols)\r\nis supported; options `S` (symbol table), `L` (generate listing), and `C`\r\n(compress object code) are ignored.\r\n\r\nYou will need to add `-OR` if you prefer to write `MOV R0,*R1+` etc. instead of\r\n`MOV 0,*1+` in your source code.\r\n\r\n`xas99` will report any errors to `stderr` during assembly.  Note that the\r\ngenerated object code may differ from the code generated by the Editor/Assembler\r\npackage in the case of errors.  `xas99` is slightly more permissive than the\r\nEditor/Assembler, but it should be able to assemble any source that the\r\nEditor/Assembler package can assemble.\r\n\r\n\r\n### Creating Program Images\r\n\r\nThe image parameter `-i` tells `xas99` to generate an image file that can be\r\nloaded using Editor/Assembler option 5.\r\n\r\n\t$ xas99.py -OR -i ashello.asm\r\n\r\nThe `-i` parameter eliminates the need for the `SAVE` utility program shipped\r\nwith the Editor/Assembler package.  Just like `SAVE`, `xas99` will honor the\r\nsymbols `SLOAD`, `SFIRST`, and `SLAST` to generate the image.  If those symbols\r\nare missing, `xas99` will relocate the relocatable program code to memory\r\nlocation `>A000` and include the resulting parts above `>A000` into the image.\r\n\r\nAll the usual restrictions for program images apply.  In particular, the first\r\nword of the image must be an executable instruction.\r\n\r\n\r\n### Creating MESS Cartridges\r\n\r\nThe cartridge parameter `-c` tells `xas99` to create an RPK cartridge file that\r\ncan be used by the MESS emulator.\r\n\r\n\t$ xas99.py -OR -c ascart.asm -n \"HELLO WORLD\"\r\n\r\nThe optional name parameter `-n` overrides the default name of the program that\r\nshows up in the TI 99 menu selection screen.\r\n\r\nThe resulting RPK archive is a ZIP file containing the actual program code plus\r\nvarious information for the MESS emulator on how to execute the program.\r\nTypically, RPK files are passed as arguments to the MESS executable, or they may\r\nbe mounted while running MESS using the emulator on-screen menu.\r\n\r\n    $ mess64 ti99_4ae -cart ascart.rpk\r\n\r\nWhen the `-c` option is given, `xas99` will automatically generate suitable GPL\r\nheader information and relocate the program to address `>6030`, but it will not\r\nprocess the source code any further.  In particular, the usual restrictions on\r\nusing VDP memory access routines apply.\r\n\r\nNote that cartridge file generation is still an experimental hack that may not\r\nwork without specific adaptions to your assembly source code.\r\n\r\n\r\n### TMS9900 Assembly Support\r\n\r\nThe `xas99` is a complete TMS9900 assembler supporting all documented TMS9900\r\nopcodes.  TMS9995 opcodes such as `MPYS` and `DIVS` are currently not supported\r\nbut may be added in a future release.\r\n\r\n`xas99` understands all assembler directives described in the Editor/Assembler\r\nmanual that are supported by both TI 99 assembler and loader, i.e.,\r\n\r\n\tDEF REF EQU DATA BYTE TEXT BSS BES AORG RORG DORG EVEN\r\n\tIDT DXOP COPY END\r\n\r\nNote that the `DORG` directive *is* supported, even though the TI assembler does\r\nnot do so.\r\n\r\nThe following directives are not supported by the TI 99 loader and are thus\r\nignored by `xas99`:\r\n\r\n    PSEG PEND CSEG CEND DSEG DEND LOAD SREF\r\n\r\nListing generation is currently not supported, so directives\r\n\r\n\tLIST UNL PAGE TITL\r\n\r\nare also ignored.\r\n\r\n\r\n#### Source Code Organization\r\n\r\nThe `COPY` directive is used to break large assembly sources into individual\r\nfiles.\r\n\r\n`xas99` will search the current source directory for appropriately named source\r\nfiles.  For example, assembling\r\n\r\n\t$ xas99.py src/file1.asm\r\n\r\nwhere `file1.asm` contains the instruction `COPY \"DSK1.FILE2\"` will search for\r\ninclude files\r\n\r\n\tsrc/FILE2\r\n\tsrc/FILE2.ASM\r\n\tsrc/FILE2.S\r\n\r\nand its corresponding lower-case variants.  `COPY` also supports native file\r\npaths, e.g., `COPY \"/home/ralph/ti/src/file2.asm\"`.\r\n\r\n\r\nxdm99 Disk Manager\r\n------------------\r\n\r\n`xdm99` is a command-line tool for cataloging and manipulating sector-based TI\r\ndisk images used by most emulators, including MESS.  `xdm99` also supports the\r\nTIFiles file format that retains TI-specific meta data for files that originate\r\nfrom TI disk images.\r\n\r\n\r\n### Cataloging Disks\r\n\r\nThe default operation of `xdm99` when invoked without any options is to print\r\nthe file catalog of the disk image to `stdout`:\r\n\r\n\t$ xdm99.py ed-asm.dsk\r\n\tED-ASSM   :     97 used  263 free   90 KB  1S/1D  40 TpS\r\n\t----------------------------------------------------------------------------\r\n\tASSM1         33  PROGRAM       8192 B\r\n\tASSM2         18  PROGRAM       4102 B\r\n\tEDIT1         25  PROGRAM       5894 B\r\n\tSAVE          13  DIS/FIX 80    3072 B   36 recs\r\n\tSFIRST/O       3  DIS/FIX 80     512 B    5 recs\r\n\tSLAST/O        3  DIS/FIX 80     512 B    4 recs\r\n\r\nThe top line shows the name of the disk, the number of used and free sectors as\r\nwell as the disk geometry.  For each file, the number of used sectors, the file\r\ntype, the file length, and the actual number of records is shown.  If present,\r\nthe file modification time is also shown.\r\n\r\n`xdm99` will warn about any inconsistencies it may find, e.g., blocks claimed by\r\nfiles but not allocated in the allocation map.  When assembling programs\r\nnatively these inconsistencies happen more frequently than one would assume.\r\nFiles affected by inconsistencies are flagged with `ERR` in the catalog.  You\r\ncan try the `-R` option to automatically repair disks with inconsistencies.\r\n\r\n\r\n### Extracting Files\r\n\r\nThe extract parameter `-e` extracts one or more files from a disk image to the\r\nlocal file system.\r\n\r\n\t$ xdm99.py work.dsk -e HELLO-S CART-S\r\n\r\nThe local output file name is derived automatically from the TI file name but\r\nmay be overridden with the `-o` parameter.\r\n\r\n\t$ xdm99.py work.dsk -e HELLO-S -o hello.asm\r\n\r\nTo print the contents of a file to `stdout`, the print parameter `-p` may also\r\nbe used:\r\n\r\n\t$ xdm99.py work.dsk -p HELLO-S\r\n\r\nIn general, printing files only makes sense for files in DIS/FIX or DIS/VAR\r\nformat.  Following Unix conventions, `-p` is equivalent to combining parameters\r\n`-e` and `-o \"-\"`.\r\n\r\nNote that extracting files will yield the file contents only.  In order to\r\nretain file meta data about file type and record length, use the TIFiles format\r\ndescribed below.\r\n\r\n\r\n### Manipulating Disks\r\n\r\nThe add parameter `-a` adds local files to the disk image.  `xdm99` will infer a\r\nsuitable TI file name from the local file name unless an explicit file name is\r\ngiven by the `-n` parameter.  If the file is not of type `PROGRAM`, the file\r\ntype must be given using the `-f` parameter.\r\n\r\n\t$ xdm99.py work.dsk -a ashello.asm -n HELLO-S -f DIS/VAR80\r\n\r\nThe syntax for `-f` is fairly permissible, e.g., `DIS/FIX 80`, `DISFIX80`, or\r\n`DF80` all work.\r\n\r\nThe delete parameter `-d` deletes one or more files on the disk.\r\n\r\n\t$ xdm99.py work.dsk -d HELLO-I\r\n\r\nNote that the current implementation of `xdm99` does not perform a \"secure\r\nerase\", i.e., parts of the file contents may remain hidden in the sectors of the\r\ndisk image.\r\n\r\nFile operations do not retain the overall sector structure of the disk.  In\r\nparticular, all files will be defragmented whenever files are added or deleted\r\nwith `-a` or `-d`, respectively, or when the disk is repaired with `-R`.  Simply\r\ncataloging the disk, however, will *not* modify the disk image.\r\n\r\nBy default, all modifying disk operations will change the disk image directly.\r\nTo create an independent copy of the original disk image with the changes\r\napplied, the `-o` parameter may be used.\r\n\r\n\r\n### TIFiles\r\n\r\nExtracting files from a TI disk image to the local file system will lose certain\r\nTI-specific file information, such as the file type or the record length.  In\r\norder to retain this meta information along with the file contents, the TIFiles\r\nformat was created.\r\n\r\n`xdm99` supports the TIFiles format for files by using the `-t` option.  To\r\nextract a file in TIFiles format, simply add `-t` to the extract operation:\r\n\r\n\t$ xdm99.py work.disk -t -e HELLO-S\r\n\r\nBy default, files extracted in TIFiles format will have extension ``.tfi`.\r\n\r\nTo add a file in TIFiles format, add `-t` to the add operation:\r\n\r\n\t$ xdm99.py work.disk -t -a hello-s.tfi\r\n\r\nAs all information about the TI file name and the TI file format is retrieved\r\nfrom the TIFiles meta data, parameters `-n` and `-f` are ignored when used in\r\ncombination with `-t`.\r\n\r\nThe info parameter `-I` displays the meta file information contained in a\r\nTIFiles file, while the print parameter `-P` dumps the file contents to\r\n`stdout`:\r\n\r\n\t$ xdm99.py -I hello-s.tfi\r\n\t$ xdm99.py -P hello-s.tfi\r\n\r\n`xdm99` can also convert from TIFiles files to plain files and vice versa\r\nwithout relying on disk images:\r\n\r\n\t$ xdm99.py -F hello-s.tfi\r\n\t$ xdm99.py -T hello.asm -f DIS/VAR80 -n HELLO-S -o hello-s.tfi\r\n\r\nNote that creating a TIFiles file using the `-T` option usually requires\r\ninformation about the TI file name and the TI file type, similar to adding files\r\nto a disk image by using `-a` without the `-t` option.\r\n\r\n\r\n### Analyzing Disks\r\n\r\nThe check parameter `-c` analyzes a disk image for errors and prints a summary\r\nto `stderr`.  While all disk operations, including cataloging, also check and\r\nreport any disk errors found, the `-c` parameter restricts the output of `xdm99`\r\nto those errors only.\r\n\r\n\t$ xdm99.py -c work.dsk\r\n\r\nThe `-c` parameter also causes `xdm99` to set its return value to non-zero for\r\nwarnings, making it simple to write shell scripts for batch processing bad disk\r\nimages.\r\n\r\nThe repair option `-R` tries to fix any disk errors, mostly by deleting\r\nerroneous files from it.\r\n\r\n\t$ xdm99.py -R work.dsk\r\n\r\nThe repair operation is likely to cause data loss, so it's best to extract\r\nerroneous files beforehand or to specify an alternative output file with `-o`.\r\n\r\nThe sector dump parameter `-s` prints the hexadecimal contents of individual\r\nsectors to `stdout`.  This can be used to further analyze disk errors or to save\r\nfragments of corrupted files.\r\n\r\n\t$ xdm99.py work.dsk -s 1\r\n\t$ xdm99.py work.dsk -s 0x22 -o first-file-sector\r\n\t\r\nFor convenience, the sector number may be specified in either decimal or\r\nhexadecimal notation.\r\n\r\n\r\nExample Usage\r\n-------------\r\n\r\nThis section gives an example on how to assemble a TI 99 assembly program and\r\nrun it on the MESS emulator.  The commands entered and the responses shown here\r\noriginate from a Linux system, but they should look very similar on Windows and\r\nMac OS X machines.\r\n\r\nThe binary distribution of xdt99 contains an `example` folder with some sample\r\nfiles that we're going to use.  For the source distribution available on Github\r\nthese files are located under the `test` folder.\r\n\r\n\t$ cd example/\r\n\t$ ls -l\r\n\t-rw-rw---- 1 ralph ralph  1822 Jan 10 12:51 ascart.asm\r\n\t-rw-rw---- 1 ralph ralph   925 Jan 10 12:32 ashello.asm\r\n\t-rw-rw---- 1 ralph ralph 92160 Jan 10 12:33 work.dsk\r\n\t\r\nThe file `ashello.asm` contains a simple assembly program that we want to\r\nassemble and run.  Since the program uses register symbols like `R0` to refer to\r\nregisters, we need to specify the `-OR` option for assembly.\r\n\r\n\t$ xas99.py -OR ashello.asm\r\n\r\nThis should yield an object code file `ashello.obj` that looks like\r\nthis:\r\n\r\n\t0007EASHELLO A0000B100DB4845B4C4CB4F20B574FB524CB4420B2020B68697F19FF       0001\r\n\tA0012B7420B616EB7920B6B65B7921B0300B0000B02E0B8300B04C0B02017F2F9F          0002\r\n\tA0028B2A20B0202B0300B0420B0000B0580B0602B16FBB0200B0043B02017F336F          0003\r\n\tA003EC0002B0202B001AB0420B0000B0208BFF00B04C9B0300B0002B10007F31FF          0004\r\n\tA0054B0300B0000BD809B837CBD809B8374B0420B0000B9220B8375B13F97F2D4F          0005\r\n\tA006ABD020B8375B0980B0240B000FB0260B0700B0420B0000B10E87F410F               0006\r\n\t50000SLOAD 50000SFIRST5007ESLAST 5001CSTART 30030VSBW  7F28AF               0007\r\n\t30046VMBW  3007AVWTR  30062KSCAN 7F827F                                     0008\r\n\t:       99/4 AS                                                             0009\r\n\r\nThis file can be loaded with the Editor/Assembler module using option 3.  But\r\nbefore we start MESS, we'll also generate an image file for option 5:\r\n\r\n\t$ xas99.py -OR -i ashello.asm\r\n\r\nThis time we should get a binary file `ashello.img` of 132 bytes.\r\n\r\n\t$ ls -l ashello.img\r\n\t-rw-rw---- 1 ralph ralph   132 Jan 10 13:11 ashello.img\r\n\r\nWe now need to transfer these files to a TI disk image so that the TI 99\r\nemulated by MESS can load it.  We'll use the SS/SD disk image `work.dsk` that is\r\nincluded in the example folder of xdt99 for convenience:\r\n\r\n\t$ xdm99.py work.dsk -a ashello.obj -n HELLO-O -f DIS/FIX80\r\n\t$ xdm99.py work.dsk -a ashello.img -n HELLO-I\r\n\t$ xdm99.py work.dsk\r\n\tWORK      :     8 used  352 free   90 KB  1S/1D  40 TpS\r\n\t----------------------------------------------------------------------------\r\n\tHELLO-I        2  PROGRAM        132 B            2015-01-10 13:15:18\r\n\tHELLO-O        4  DIS/VAR 80     755 B    9 recs  2015-01-10 13:15:10\r\n\r\nWe start MESS with our work disk inserted in floppy drive 1:\r\n\r\n\t$ mess64 ti99_4ae -peb:slot2 32kmem -peb:slot8 hfdc -cart EA.rpk -flop1 work.dsk\r\n\r\nYou may have to adjust the command for starting MESS based on the location of\r\nyour Editor/Assembler cartridge file.  When using a graphical frontend to launch\r\nMESS, use your GUI to select the Editor/Assembler module and the disk image\r\npreviously created.\r\n\r\nOn the TI 99/4A startup screen, we hit any key, then select the Editor/Assembler\r\nmodule.  We select option 3, `LOAD AND RUN`, then enter the name of the object\r\ncode file at the `FILE NAME?` prompt:\r\n\r\n\tDSK1.HELLO-O\r\n\r\nOnce the loader finishes, we hit `ENTER` to advance to the `PROGRAM NAME?`\r\nprompt, and type `START` to start the program.  The words \"HELLO WORLD\" should\r\nappear on screen, and hitting any key will change the color of the screen\r\nborder.\r\n\r\nWhen done, we quit the program by hitting `FCTN =`.  Again we select the\r\nEditor/Assembler module, but now we select option 5, `RUN PROGRAM FILE`.  We\r\nenter the name of the image file:\r\n\r\n\tDSK1.HELLO-I\r\n\r\nThe program will start automatically once loading has completed.\r\n\r\nTo run assembly programs without the Editor/Assembler module, we finally\r\ngenerate our own self-contained cartridge.\r\n\r\nFirst we need to assemble our source code using the `-c` option.\r\n\r\n\t$ xas99.py -OR -c ascart.asm -n \"HELLO CART\"\r\n\r\nNote that we cannot run the `ashello.asm` program as a cartridge, since we call\r\n`VSBW` and other VDP subroutines, which are unavailable without Editor/Assembler\r\nmodule and memory expansion.  The `ascart.asm` program thus uses the VDP\r\nregisters directly to write to VDP memory.\r\n\r\nWe don't have to transfer the resulting RPK file to a disk image but can plug\r\nthe cartridge directly into the MESS emulator:\r\n\r\n\t$ mess64 ti99_4ae -cart ascart.rpk\r\n\r\nAfter pressing any key on the TI 99 startup screen you should now see \"HELLO\r\nCART\" as the second option on the menu screen.  Pressing 2 will run the sample\r\nprogram.\r\n\r\n\r\nFeedback and Bug Reports\r\n------------------------\r\n\r\nThe xdt99 tools are released under the GNU GPL, in the hope that TI 99\r\nenthusiasts may find them useful.\r\n\r\nFor feedback, bug reports, and feature requests the developer can be reached at\r\n<xdt99@endlos.net>.\r\n\r\n\r\n[1]: https://endlos99.github.io/xdt99\r\n[2]: https://github.com/endlos99/xdt99/releases\r\n[3]: https://github.com/endlos99/xdt99\r\n[4]: https://www.python.org/downloads/\r\n[5]: http://www.mizapf.de/ti99/tiimagetool.html\r\n[6]: http://www.mrousseau.org/programs/ti99sim/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}