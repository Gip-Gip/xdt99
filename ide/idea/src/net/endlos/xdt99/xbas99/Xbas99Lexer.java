/* The following code was generated by JFlex 1.4.3 on 8/9/15 8:28 PM */

package net.endlos.xdt99.xbas99;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import net.endlos.xdt99.xbas99.psi.Xbas99Types;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/9/15 8:28 PM from the specification file
 * <tt>/home/ralph/prj/ti99/xdt99/ide/idea/src/net/endlos/xdt99/xbas99/Xbas99.flex</tt>
 */
class Xbas99Lexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DATA = 4;
  public static final int S = 2;
  public static final int YYINITIAL = 0;
  public static final int REM = 8;
  public static final int IMAGE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\32\1\35\2\0\1\30\22\0\1\32\1\56\1\27\1\52"+
    "\1\44\1\0\1\55\1\0\1\53\1\54\2\34\1\36\1\25\1\26"+
    "\1\34\12\33\1\45\1\46\1\50\1\47\1\51\1\0\1\31\1\1"+
    "\1\2\1\4\1\21\1\10\1\11\1\16\1\24\1\14\1\31\1\37"+
    "\1\15\1\17\1\6\1\7\1\13\1\22\1\20\1\3\1\5\1\41"+
    "\1\23\1\43\1\12\1\40\1\42\3\31\1\34\1\31\1\0\1\1"+
    "\1\2\1\4\1\21\1\10\1\11\1\16\1\24\1\14\1\31\1\37"+
    "\1\15\1\17\1\6\1\7\1\13\1\22\1\20\1\3\1\5\1\41"+
    "\1\23\1\43\1\12\1\40\1\42\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\5\23\10\1\11\1\12\1\4\1\13\1\14\1\15"+
    "\2\10\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\1\1\15\1\2\1\3\10\10"+
    "\1\30\63\10\1\0\1\12\1\0\1\31\1\13\5\10"+
    "\1\16\1\32\2\10\1\33\1\34\2\33\16\10\1\35"+
    "\1\36\2\35\5\10\1\37\1\40\2\37\2\10\1\41"+
    "\1\42\2\41\11\10\1\43\3\10\1\44\1\45\2\44"+
    "\3\10\1\46\2\10\1\47\2\46\17\10\1\0\1\12"+
    "\1\31\6\10\1\50\1\10\1\51\1\52\2\51\1\10"+
    "\1\53\1\54\2\53\5\10\1\30\2\10\1\55\1\10"+
    "\1\56\2\55\4\10\1\57\1\60\2\57\5\10\1\61"+
    "\1\62\2\61\3\10\1\63\1\64\2\63\1\10\1\65"+
    "\1\66\2\65\5\10\1\67\1\70\2\67\10\10\1\71"+
    "\1\72\2\71\1\73\1\74\2\73\1\10\1\75\1\76"+
    "\2\75\3\10\1\77\1\100\2\77\12\10\1\101\1\102"+
    "\2\101\1\103\1\104\2\103\1\10\1\105\1\106\2\105"+
    "\1\107\1\110\2\107\1\111\1\10\1\112\1\113\2\112"+
    "\2\10\1\114\1\115\2\114\2\10\1\116\1\117\2\116"+
    "\1\120\1\121\2\120\2\10\1\122\1\123\2\122\1\10"+
    "\1\124\1\125\2\124\12\10\1\126\1\127\2\126\1\10"+
    "\1\130\1\131\2\130\3\10\1\132\1\133\2\132\15\10"+
    "\1\134\1\135\2\134\3\10\1\136\1\137\2\136\1\140"+
    "\1\141\2\140\3\10\1\142\1\143\2\142\1\144\1\145"+
    "\2\144\1\146\1\147\2\146\1\10\1\150\1\151\2\150"+
    "\1\10\1\152\1\153\2\152\1\154\1\155\2\154\1\10"+
    "\1\156\1\157\2\156\6\10\1\160\1\161\2\160\3\10"+
    "\1\162\1\163\2\162\4\10\1\164\1\165\2\164\1\166"+
    "\1\167\2\166\1\10\1\170\1\171\2\170\2\10\1\172"+
    "\1\173\2\172\1\174\1\175\2\174\2\10\1\176\1\177"+
    "\2\176\2\10\1\200\1\201\2\200\1\10\1\202\1\203"+
    "\2\202\3\10\1\204\1\205\2\204\2\10\1\206\1\207"+
    "\2\206\2\10\1\210\1\211\2\210\1\212\1\213\2\212"+
    "\3\10\1\214\1\215\2\214\1\10\1\216\1\217\2\216"+
    "\2\10\1\220\1\221\2\220\1\222\1\223\2\222\1\224"+
    "\1\225\2\224\2\10\1\226\1\227\2\226\1\10\1\230"+
    "\1\231\2\230\1\232\1\233\2\232\1\234\1\235\2\234"+
    "\1\10\1\236\1\237\2\236\1\240\1\241\2\240\1\242"+
    "\1\243\2\242";

  private static int [] zzUnpackAction() {
    int [] result = new int[592];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\353\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292"+
    "\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a"+
    "\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa"+
    "\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\353\0\u0843"+
    "\0\353\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04"+
    "\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c"+
    "\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4"+
    "\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c"+
    "\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4"+
    "\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c"+
    "\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4"+
    "\0\u1403\0\u0582\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d"+
    "\0\u154c\0\u157b\0\u15aa\0\u15d9\0\u1608\0\353\0\u1637\0\u04c6"+
    "\0\u0a48\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780"+
    "\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9\0\353"+
    "\0\u18f8\0\u04c6\0\u0a48\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3"+
    "\0\353\0\u1a12\0\u04c6\0\u0a48\0\u1a41\0\u1a70\0\353\0\u1a9f"+
    "\0\u04c6\0\u0a48\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9"+
    "\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\353"+
    "\0\u1d31\0\u04c6\0\u0a48\0\u1d60\0\u1d8f\0\u1dbe\0\353\0\u1ded"+
    "\0\u1e1c\0\u1e4b\0\u04c6\0\u0a48\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07"+
    "\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050\0\u207f"+
    "\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8\0\u21f7"+
    "\0\u2226\0\u2255\0\u2284\0\u22b3\0\u22e2\0\u2311\0\353\0\u2340"+
    "\0\u04c6\0\u0a48\0\u236f\0\353\0\u239e\0\u04c6\0\u0a48\0\u23cd"+
    "\0\u23fc\0\u242b\0\u245a\0\u2489\0\u24b8\0\u24e7\0\u2516\0\353"+
    "\0\u2545\0\u2574\0\u04c6\0\u0a48\0\u25a3\0\u25d2\0\u2601\0\u2630"+
    "\0\353\0\u265f\0\u04c6\0\u0a48\0\u268e\0\u26bd\0\u26ec\0\u271b"+
    "\0\u274a\0\353\0\u2779\0\u04c6\0\u0a48\0\u27a8\0\u27d7\0\u2806"+
    "\0\353\0\u2835\0\u04c6\0\u0a48\0\u2864\0\353\0\u2893\0\u04c6"+
    "\0\u0a48\0\u28c2\0\u28f1\0\u2920\0\u294f\0\u297e\0\353\0\u29ad"+
    "\0\u04c6\0\u0a48\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98\0\u2ac7"+
    "\0\u2af6\0\u2b25\0\353\0\u2b54\0\u04c6\0\u0a48\0\353\0\u2b83"+
    "\0\u04c6\0\u0a48\0\u2bb2\0\353\0\u2be1\0\u04c6\0\u0a48\0\u2c10"+
    "\0\u2c3f\0\u2c6e\0\353\0\u2c9d\0\u04c6\0\u0a48\0\u2ccc\0\u2cfb"+
    "\0\u2d2a\0\u2d59\0\u2d88\0\u2db7\0\u2de6\0\u2e15\0\u2e44\0\u2e73"+
    "\0\353\0\u2ea2\0\u04c6\0\u0a48\0\353\0\u2ed1\0\u04c6\0\u0a48"+
    "\0\u2f00\0\353\0\u2f2f\0\u04c6\0\u0a48\0\353\0\u2f5e\0\u04c6"+
    "\0\u0a48\0\u24b8\0\u2f8d\0\353\0\u2fbc\0\u04c6\0\u0a48\0\u2feb"+
    "\0\u301a\0\353\0\u3049\0\u04c6\0\u0a48\0\u3078\0\u30a7\0\353"+
    "\0\u30d6\0\u04c6\0\u0a48\0\353\0\u3105\0\u04c6\0\u0a48\0\u3134"+
    "\0\u3163\0\353\0\u3192\0\u04c6\0\u0a48\0\u31c1\0\353\0\u31f0"+
    "\0\u04c6\0\u0a48\0\u321f\0\u324e\0\u327d\0\u32ac\0\u32db\0\u330a"+
    "\0\u3339\0\u3368\0\u3397\0\u33c6\0\353\0\u33f5\0\u04c6\0\u0a48"+
    "\0\u3424\0\353\0\u3453\0\u04c6\0\u0a48\0\u3482\0\u34b1\0\u34e0"+
    "\0\353\0\u350f\0\u04c6\0\u0a48\0\u353e\0\u356d\0\u359c\0\u35cb"+
    "\0\u35fa\0\u3629\0\u3658\0\u3687\0\u36b6\0\u36e5\0\u3714\0\u3743"+
    "\0\u3772\0\353\0\u37a1\0\u04c6\0\u0a48\0\u37d0\0\u37ff\0\u382e"+
    "\0\353\0\u385d\0\u04c6\0\u0a48\0\353\0\u388c\0\u04c6\0\u0a48"+
    "\0\u38bb\0\u38ea\0\u3919\0\353\0\u3948\0\u04c6\0\u0a48\0\353"+
    "\0\u3977\0\u04c6\0\u0a48\0\353\0\u39a6\0\u04c6\0\u0a48\0\u39d5"+
    "\0\353\0\u3a04\0\u04c6\0\u0a48\0\u3a33\0\353\0\u3a62\0\u04c6"+
    "\0\u0a48\0\353\0\u3a91\0\u04c6\0\u0a48\0\u3ac0\0\353\0\u3aef"+
    "\0\u04c6\0\u0a48\0\u3b1e\0\u3b4d\0\u3b7c\0\u3bab\0\u3bda\0\u3c09"+
    "\0\353\0\u3c38\0\u04c6\0\u0a48\0\u3c67\0\u3c96\0\u3cc5\0\353"+
    "\0\u3cf4\0\u04c6\0\u0a48\0\u3d23\0\u3d52\0\u3d81\0\u3db0\0\353"+
    "\0\u3ddf\0\u04c6\0\u0a48\0\353\0\u3e0e\0\u04c6\0\u0a48\0\u3e3d"+
    "\0\353\0\u3e6c\0\u04c6\0\u0a48\0\u3e9b\0\u3eca\0\353\0\u3ef9"+
    "\0\u04c6\0\u0a48\0\353\0\u3f28\0\u04c6\0\u0a48\0\u3f57\0\u3f86"+
    "\0\353\0\u3fb5\0\u04c6\0\u0a48\0\u3fe4\0\u4013\0\353\0\u4042"+
    "\0\u04c6\0\u0a48\0\u4071\0\353\0\u40a0\0\u04c6\0\u0a48\0\u40cf"+
    "\0\u40fe\0\u412d\0\353\0\u415c\0\u04c6\0\u0a48\0\u418b\0\u41ba"+
    "\0\353\0\u41e9\0\u04c6\0\u0a48\0\u4218\0\u4247\0\353\0\u4276"+
    "\0\u04c6\0\u0a48\0\353\0\u42a5\0\u04c6\0\u0a48\0\u42d4\0\u4303"+
    "\0\u4332\0\353\0\u4361\0\u04c6\0\u0a48\0\u4390\0\353\0\u43bf"+
    "\0\u04c6\0\u0a48\0\u43ee\0\u441d\0\353\0\u444c\0\u04c6\0\u0a48"+
    "\0\353\0\u447b\0\u04c6\0\u0a48\0\353\0\u44aa\0\u04c6\0\u0a48"+
    "\0\u44d9\0\u4508\0\353\0\u4537\0\u04c6\0\u0a48\0\u4566\0\353"+
    "\0\u4595\0\u04c6\0\u0a48\0\353\0\u45c4\0\u04c6\0\u0a48\0\353"+
    "\0\u45f3\0\u04c6\0\u0a48\0\u4622\0\353\0\u4651\0\u04c6\0\u0a48"+
    "\0\353\0\u4680\0\u04c6\0\u0a48\0\353\0\u46af\0\u04c6\0\u0a48";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[592];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\30\6\1\7\1\6\1\10\1\11\1\6\1\12\22\6"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\34\1\36\1\37\1\40\1\7"+
    "\1\34\1\6\1\41\1\42\1\12\1\43\2\34\1\44"+
    "\1\34\1\45\1\6\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\30\60\1\7\4\60"+
    "\1\12\1\61\20\60\30\62\1\7\4\62\1\12\21\62"+
    "\30\63\1\7\4\63\1\12\21\63\114\0\1\12\53\0"+
    "\1\10\57\0\1\11\24\0\1\34\1\64\1\65\1\66"+
    "\1\67\1\70\4\34\1\71\1\34\1\72\7\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\1\75"+
    "\6\34\1\76\7\34\1\77\4\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\4\34\1\100\2\34"+
    "\1\101\3\34\1\102\1\34\1\103\3\34\1\104\2\34"+
    "\4\0\1\34\1\73\1\34\3\0\2\34\1\105\2\34"+
    "\1\74\13\0\1\106\5\34\1\64\5\34\1\107\6\34"+
    "\1\110\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\1\111\5\34\1\112\10\34\1\113\3\34\1\114"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\13\0"+
    "\6\34\1\115\1\116\14\34\4\0\1\34\1\73\1\34"+
    "\3\0\2\34\1\117\2\34\1\74\13\0\5\34\1\120"+
    "\4\34\1\121\4\34\1\122\4\34\4\0\1\34\1\73"+
    "\1\34\3\0\2\34\1\123\2\34\1\74\13\0\5\34"+
    "\1\124\1\125\2\34\1\126\2\34\1\127\2\34\1\130"+
    "\4\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\6\34\1\131\4\34\1\132\10\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\6\34\1\133"+
    "\15\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\6\34\1\64\1\134\3\34\1\135\3\34\1\136"+
    "\4\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\5\34\1\137\2\34\1\140\5\34\1\141\5\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\13\0"+
    "\6\34\1\142\1\143\3\34\1\144\10\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\6\34\1\145"+
    "\15\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\1\146\12\34\1\103\10\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\1\147\4\34\1\150"+
    "\1\34\1\151\2\34\1\152\11\34\4\0\1\34\1\73"+
    "\1\34\3\0\2\34\1\153\2\34\1\74\13\0\1\154"+
    "\6\34\1\155\3\34\1\156\10\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\24\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\1\157\23\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\44\0"+
    "\1\36\34\0\1\160\21\0\1\161\1\37\23\0\27\162"+
    "\1\163\1\0\4\162\1\0\21\162\10\0\1\160\15\0"+
    "\1\37\3\0\1\164\1\41\55\0\1\42\56\0\1\43"+
    "\25\0\1\165\1\34\1\166\2\34\1\167\4\34\1\170"+
    "\11\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\1\171\23\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\44\0\1\172\12\0\1\173\43\0\1\47"+
    "\56\0\1\50\56\0\1\51\56\0\1\52\56\0\1\53"+
    "\56\0\1\54\56\0\1\55\56\0\1\56\24\0\30\60"+
    "\1\0\4\60\2\0\20\60\30\62\1\0\4\62\1\0"+
    "\21\62\30\63\1\0\4\63\1\0\21\63\1\0\2\34"+
    "\1\174\21\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\3\34\1\174\20\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\3\34\1\175\20\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\12\0"+
    "\1\176\5\34\1\174\16\34\4\176\1\34\1\177\1\200"+
    "\3\176\5\34\1\201\12\176\1\0\20\34\1\202\3\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\13\0"+
    "\12\34\1\203\11\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\13\0\14\34\1\204\7\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\44\0\1\73\56\0"+
    "\1\74\25\0\2\34\1\205\21\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\7\34\1\206\14\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\13\0"+
    "\7\34\1\207\14\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\13\0\6\34\1\210\1\211\7\34\1\212"+
    "\4\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\15\34\1\212\3\34\1\213\2\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\5\34\1\174"+
    "\16\34\4\0\1\34\1\73\1\34\3\0\3\34\1\214"+
    "\1\34\1\74\13\0\5\34\1\174\16\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\17\34\1\174"+
    "\4\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\1\34\1\215\22\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\13\0\14\34\1\216\7\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\6\34"+
    "\1\217\15\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\17\34\1\212\4\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\1\34\1\174\3\34"+
    "\1\174\16\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\12\0\1\220\24\34\4\220\1\34\1\221\1\222"+
    "\3\220\5\34\1\223\12\220\1\0\1\224\23\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\7\34"+
    "\1\225\14\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\4\34\1\226\17\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\11\34\1\227\12\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\13\0"+
    "\16\34\1\230\5\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\12\0\1\231\24\34\4\231\1\34\1\232"+
    "\1\233\3\231\5\34\1\234\12\231\1\0\4\34\1\235"+
    "\2\34\1\236\14\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\12\0\1\237\24\34\4\237\1\34\1\240"+
    "\1\241\3\237\5\34\1\242\12\237\1\0\4\34\1\243"+
    "\17\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\20\34\1\244\3\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\13\0\10\34\1\174\13\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\12\34"+
    "\1\174\11\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\2\34\1\245\21\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\1\246\16\34\1\247"+
    "\4\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\17\34\1\250\4\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\13\0\11\34\1\251\12\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\17\34"+
    "\1\252\4\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\17\34\1\253\4\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\24\34\4\0\1\34"+
    "\1\254\1\34\3\0\5\34\1\74\13\0\13\34\1\255"+
    "\10\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\4\34\1\256\5\34\1\257\11\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\12\0\1\260\24\34"+
    "\4\260\1\34\1\261\1\262\3\260\5\34\1\263\12\260"+
    "\1\0\1\264\23\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\13\0\15\34\1\174\6\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\4\34\1\265"+
    "\1\174\16\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\5\34\1\266\16\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\12\0\1\267\2\34\1\270"+
    "\1\34\1\271\17\34\4\267\1\34\1\272\1\273\3\267"+
    "\5\34\1\274\12\267\1\0\11\34\1\174\12\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\5\34"+
    "\1\275\16\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\20\34\1\174\3\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\1\276\1\34\1\277"+
    "\1\174\1\300\7\34\1\301\1\34\1\302\5\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\4\34"+
    "\1\212\17\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\5\34\1\303\16\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\4\34\1\304\17\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\13\0"+
    "\10\34\1\305\3\34\1\306\7\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\2\34\1\307\12\34"+
    "\1\310\1\311\5\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\13\0\14\34\1\312\2\34\1\313\4\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\37\0"+
    "\1\314\5\0\1\315\55\0\1\161\53\0\1\162\2\0"+
    "\1\316\56\0\1\164\25\0\14\34\1\317\7\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\13\34"+
    "\1\320\10\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\1\34\1\321\2\34\1\322\17\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\20\34"+
    "\1\323\3\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\17\34\1\324\4\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\44\0\1\172\56\0\1\173"+
    "\25\0\24\34\4\0\1\34\1\325\1\34\3\0\5\34"+
    "\1\74\13\0\7\34\1\326\14\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\44\0\1\177\24\0\1\327"+
    "\24\34\4\327\1\34\1\330\1\331\3\327\5\34\1\332"+
    "\12\327\1\0\7\34\1\333\14\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\12\0\1\334\24\34\4\334"+
    "\1\34\1\335\1\336\3\334\5\34\1\337\12\334\1\0"+
    "\7\34\1\340\14\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\13\0\12\34\1\341\11\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\1\342\23\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\13\0"+
    "\12\34\1\343\11\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\13\0\12\34\1\344\11\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\24\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\345\13\0\24\34"+
    "\4\0\1\34\1\73\1\34\3\0\2\34\1\346\2\34"+
    "\1\74\13\0\7\34\1\347\14\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\12\0\1\350\7\34\1\351"+
    "\14\34\4\350\1\34\1\352\1\353\3\350\5\34\1\354"+
    "\12\350\1\0\14\34\1\355\7\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\2\34\1\356\21\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\44\0"+
    "\1\221\25\0\3\34\1\357\20\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\5\34\1\360\16\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\12\0"+
    "\1\361\24\34\4\361\1\34\1\362\1\363\3\361\5\34"+
    "\1\364\12\361\1\0\4\34\1\365\17\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\7\34\1\366"+
    "\14\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\44\0\1\232\25\0\13\34\1\367\10\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\5\34\1\370"+
    "\16\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\44\0\1\240\25\0\12\34\1\371\11\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\12\0\1\372\24\34"+
    "\4\372\1\34\1\373\1\374\3\372\5\34\1\375\12\372"+
    "\1\0\7\34\1\376\14\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\13\0\2\34\1\377\21\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\6\34"+
    "\1\u0100\15\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\12\0\1\u0101\24\34\4\u0101\1\34\1\u0102\1\u0103"+
    "\3\u0101\5\34\1\u0104\12\u0101\1\0\7\34\1\u0105\14\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\12\0"+
    "\1\u0106\24\34\4\u0106\1\34\1\u0107\1\u0108\3\u0106\5\34"+
    "\1\u0109\12\u0106\1\0\16\34\1\u010a\5\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\44\0\1\254\25\0"+
    "\5\34\1\u010b\16\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\13\0\7\34\1\u010c\14\34\4\0\1\34"+
    "\1\325\1\34\3\0\5\34\1\74\13\0\24\34\4\0"+
    "\1\34\1\73\1\34\3\0\2\34\1\u010d\2\34\1\74"+
    "\44\0\1\261\25\0\15\34\1\u010e\6\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\12\0\1\u010f\24\34"+
    "\4\u010f\1\34\1\u0110\1\u0111\3\u010f\5\34\1\u0112\12\u010f"+
    "\1\0\12\34\1\u0113\11\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\13\0\24\34\4\0\1\34\1\73"+
    "\1\34\3\0\2\34\1\u0114\2\34\1\74\13\0\6\34"+
    "\1\u0115\15\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\44\0\1\272\25\0\20\34\1\u0116\3\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\20\34"+
    "\1\u0117\3\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\4\34\1\u0118\17\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\24\34\4\0\1\34"+
    "\1\73\1\34\3\0\2\34\1\u0119\2\34\1\74\13\0"+
    "\1\u011a\23\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\12\0\1\u011b\24\34\4\u011b\1\34\1\u011c\1\u011d"+
    "\3\u011b\5\34\1\u011e\12\u011b\1\u011f\24\34\4\u011f\1\34"+
    "\1\u0120\1\u0121\3\u011f\5\34\1\u0122\12\u011f\1\0\1\u0123"+
    "\23\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\12\0\1\u0124\24\34\4\u0124\1\34\1\u0125\1\u0126\3\u0124"+
    "\5\34\1\u0127\12\u0124\1\0\7\34\1\u0128\14\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\12\34"+
    "\1\u0129\11\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\13\34\1\u012a\10\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\12\0\1\u012b\24\34\4\u012b"+
    "\1\34\1\u012c\1\u012d\3\u012b\5\34\1\u012e\12\u012b\1\0"+
    "\13\34\1\u012f\10\34\4\0\1\34\1\325\1\34\3\0"+
    "\5\34\1\74\13\0\13\34\1\u0130\10\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\45\0\1\315\55\0"+
    "\1\161\1\315\55\0\1\316\25\0\12\34\1\u0131\11\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\13\0"+
    "\5\34\1\u0132\16\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\13\0\17\34\1\u0133\4\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\17\34\1\u0134"+
    "\4\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\1\u0135\23\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\13\0\5\34\1\u0136\16\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\44\0\1\325\25\0"+
    "\12\34\1\u0137\11\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\44\0\1\330\25\0\5\34\1\u0138\16\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\44\0"+
    "\1\335\24\0\1\u0139\24\34\4\u0139\1\34\1\u013a\1\u013b"+
    "\3\u0139\5\34\1\u013c\12\u0139\1\u013d\24\34\4\u013d\1\34"+
    "\1\u013e\1\u013f\3\u013d\5\34\1\u0140\12\u013d\1\0\24\34"+
    "\4\0\1\34\1\73\1\34\3\0\1\u0141\4\34\1\74"+
    "\12\0\1\u0142\24\34\4\u0142\1\34\1\u0143\1\u0144\3\u0142"+
    "\5\34\1\u0145\12\u0142\1\u0146\24\34\4\u0146\1\34\1\u0147"+
    "\1\u0148\3\u0146\5\34\1\u0149\12\u0146\32\0\1\u014a\25\0"+
    "\7\34\1\u014b\14\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\12\0\1\u014c\24\34\4\u014c\1\34\1\u014d"+
    "\1\u014e\3\u014c\5\34\1\u014f\12\u014c\1\0\5\34\1\u0150"+
    "\3\34\1\u0151\12\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\44\0\1\352\24\0\1\u0152\24\34\4\u0152"+
    "\1\34\1\u0153\1\u0154\3\u0152\5\34\1\u0155\12\u0152\1\0"+
    "\7\34\1\u0156\14\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\13\0\7\34\1\u0157\14\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\12\0\1\u0158\24\34"+
    "\4\u0158\1\34\1\u0159\1\u015a\3\u0158\5\34\1\u015b\12\u0158"+
    "\32\0\1\362\24\0\1\u015c\24\34\4\u015c\1\34\1\u015d"+
    "\1\u015e\3\u015c\5\34\1\u015f\12\u015c\1\0\17\34\1\u0160"+
    "\4\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\6\34\1\u0161\15\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\12\0\1\u0162\24\34\4\u0162\1\34"+
    "\1\u0163\1\u0164\3\u0162\5\34\1\u0165\12\u0162\1\0\24\34"+
    "\4\0\1\34\1\73\1\34\3\0\2\34\1\u0166\2\34"+
    "\1\74\44\0\1\373\24\0\1\u0167\24\34\4\u0167\1\34"+
    "\1\u0168\1\u0169\3\u0167\5\34\1\u016a\12\u0167\1\0\7\34"+
    "\1\u016b\14\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\17\34\1\u016c\4\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\44\0\1\u0102\25\0\20\34"+
    "\1\u016d\3\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\44\0\1\u0107\25\0\1\u016e\23\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\4\34\1\u016f"+
    "\17\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\17\34\1\u0170\4\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\13\0\4\34\1\u0171\17\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\7\34"+
    "\1\u0172\14\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\44\0\1\u0110\25\0\24\34\4\0\1\34\1\73"+
    "\1\34\3\0\2\34\1\u0173\2\34\1\74\13\0\1\34"+
    "\1\u0174\22\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\12\0\1\u0175\24\34\4\u0175\1\34\1\u0176\1\u0177"+
    "\3\u0175\5\34\1\u0178\12\u0175\1\0\6\34\1\u0179\15\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\12\0"+
    "\1\u017a\24\34\4\u017a\1\34\1\u017b\1\u017c\3\u017a\5\34"+
    "\1\u017d\12\u017a\1\0\6\34\1\u017e\15\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\17\34\1\u017f"+
    "\4\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\4\34\1\u0180\17\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\44\0\1\u011c\56\0\1\u0120\24\0"+
    "\1\u0181\24\34\4\u0181\1\34\1\u0182\1\u0183\3\u0181\5\34"+
    "\1\u0184\12\u0181\32\0\1\u0125\25\0\4\34\1\u0185\17\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\13\0"+
    "\14\34\1\u0186\7\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\13\0\4\34\1\u0187\17\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\44\0\1\u012c\25\0"+
    "\20\34\1\u0188\3\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\13\0\1\u0189\23\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\23\34\1\u018a\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\15\34"+
    "\1\u018b\6\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\7\34\1\u018c\14\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\1\u018d\23\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\4\34"+
    "\1\u018e\17\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\13\34\1\u018f\10\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\4\34\1\u0190\17\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\13\0"+
    "\20\34\1\u0191\3\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\44\0\1\u013a\56\0\1\u013e\24\0\1\u0192"+
    "\24\34\4\u0192\1\34\1\u0193\1\u0194\3\u0192\5\34\1\u0195"+
    "\12\u0192\32\0\1\u0143\56\0\1\u0147\25\0\5\34\1\u0196"+
    "\16\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\44\0\1\u014d\25\0\20\34\1\u0197\3\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\13\34\1\u0198"+
    "\10\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\44\0\1\u0153\24\0\1\u0199\24\34\4\u0199\1\34\1\u019a"+
    "\1\u019b\3\u0199\5\34\1\u019c\12\u0199\1\u019d\24\34\4\u019d"+
    "\1\34\1\u019e\1\u019f\3\u019d\5\34\1\u01a0\12\u019d\32\0"+
    "\1\u0159\56\0\1\u015d\25\0\13\34\1\u01a1\10\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\13\0\5\34"+
    "\1\u01a2\16\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\44\0\1\u0163\25\0\4\34\1\u01a3\17\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\44\0\1\u0168"+
    "\24\0\1\u01a4\24\34\4\u01a4\1\34\1\u01a5\1\u01a6\3\u01a4"+
    "\5\34\1\u01a7\12\u01a4\1\u01a8\24\34\4\u01a8\1\34\1\u01a9"+
    "\1\u01aa\3\u01a8\5\34\1\u01ab\12\u01a8\1\u01ac\24\34\4\u01ac"+
    "\1\34\1\u01ad\1\u01ae\3\u01ac\5\34\1\u01af\12\u01ac\1\0"+
    "\5\34\1\u01b0\16\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\12\0\1\u01b1\24\34\4\u01b1\1\34\1\u01b2"+
    "\1\u01b3\3\u01b1\5\34\1\u01b4\12\u01b1\1\0\5\34\1\u01b5"+
    "\16\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\12\0\1\u01b6\24\34\4\u01b6\1\34\1\u01b7\1\u01b8\3\u01b6"+
    "\5\34\1\u01b9\12\u01b6\1\u01ba\24\34\4\u01ba\1\34\1\u01bb"+
    "\1\u01bc\3\u01ba\5\34\1\u01bd\12\u01ba\1\0\4\34\1\u01be"+
    "\17\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\12\0\1\u01bf\24\34\4\u01bf\1\34\1\u01c0\1\u01c1\3\u01bf"+
    "\5\34\1\u01c2\12\u01bf\32\0\1\u0176\25\0\16\34\1\u01c3"+
    "\5\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\44\0\1\u017b\25\0\17\34\1\u01c4\4\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\13\0\5\34\1\u01c5"+
    "\16\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\13\34\1\u01c6\10\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\44\0\1\u0182\25\0\7\34\1\u01c7"+
    "\14\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\13\0\1\u01c8\23\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\12\0\1\u01c9\24\34\4\u01c9\1\34\1\u01ca"+
    "\1\u01cb\3\u01c9\5\34\1\u01cc\12\u01c9\1\0\1\u01cd\23\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\13\0"+
    "\1\34\1\u01ce\22\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\13\0\1\u01cf\23\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\12\0\1\u01d0\24\34\4\u01d0"+
    "\1\34\1\u01d1\1\u01d2\3\u01d0\5\34\1\u01d3\12\u01d0\1\0"+
    "\1\u01d4\23\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\13\0\3\34\1\u01d5\20\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\13\0\7\34\1\u01d6\14\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\13\0"+
    "\5\34\1\u01d7\16\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\12\0\1\u01d8\24\34\4\u01d8\1\34\1\u01d9"+
    "\1\u01da\3\u01d8\5\34\1\u01db\12\u01d8\1\u01dc\24\34\4\u01dc"+
    "\1\34\1\u01dd\1\u01de\3\u01dc\5\34\1\u01df\12\u01dc\32\0"+
    "\1\u0193\25\0\4\34\1\u01e0\17\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\12\0\1\u01e1\24\34\4\u01e1"+
    "\1\34\1\u01e2\1\u01e3\3\u01e1\5\34\1\u01e4\12\u01e1\1\0"+
    "\4\34\1\u01e5\17\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\44\0\1\u019a\56\0\1\u019e\25\0\3\34"+
    "\1\u01e6\20\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\12\0\1\u01e7\24\34\4\u01e7\1\34\1\u01e8\1\u01e9"+
    "\3\u01e7\5\34\1\u01ea\12\u01e7\1\u01eb\24\34\4\u01eb\1\34"+
    "\1\u01ec\1\u01ed\3\u01eb\5\34\1\u01ee\12\u01eb\32\0\1\u01a5"+
    "\56\0\1\u01a9\56\0\1\u01ad\25\0\7\34\1\u01ef\14\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\44\0"+
    "\1\u01b2\25\0\1\u01f0\23\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\44\0\1\u01b7\56\0\1\u01bb\24\0"+
    "\1\u01f1\24\34\4\u01f1\1\34\1\u01f2\1\u01f3\3\u01f1\5\34"+
    "\1\u01f4\12\u01f1\32\0\1\u01c0\25\0\13\34\1\u01f5\10\34"+
    "\4\0\1\34\1\73\1\34\3\0\5\34\1\74\13\0"+
    "\7\34\1\u01f6\14\34\4\0\1\34\1\73\1\34\3\0"+
    "\5\34\1\74\12\0\1\u01f7\24\34\4\u01f7\1\34\1\u01f8"+
    "\1\u01f9\3\u01f7\5\34\1\u01fa\12\u01f7\1\0\22\34\1\u01fb"+
    "\1\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\12\0\1\u01fc\24\34\4\u01fc\1\34\1\u01fd\1\u01fe\3\u01fc"+
    "\5\34\1\u01ff\12\u01fc\1\0\24\34\4\0\1\34\1\73"+
    "\1\34\3\0\1\34\1\u0200\3\34\1\74\44\0\1\u01ca"+
    "\25\0\4\34\1\u0201\17\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\13\0\14\34\1\u0202\7\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\12\0\1\u0203"+
    "\24\34\4\u0203\1\34\1\u0204\1\u0205\3\u0203\5\34\1\u0206"+
    "\12\u0203\32\0\1\u01d1\25\0\24\34\4\0\1\34\1\73"+
    "\1\34\3\0\1\u0207\4\34\1\74\13\0\7\34\1\u0208"+
    "\14\34\4\0\1\34\1\73\1\34\3\0\5\34\1\74"+
    "\12\0\1\u0209\24\34\4\u0209\1\34\1\u020a\1\u020b\3\u0209"+
    "\5\34\1\u020c\12\u0209\1\0\15\34\1\u020d\6\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\44\0\1\u01d9"+
    "\56\0\1\u01dd\25\0\13\34\1\u020e\10\34\4\0\1\34"+
    "\1\73\1\34\3\0\5\34\1\74\44\0\1\u01e2\24\0"+
    "\1\u020f\24\34\4\u020f\1\34\1\u0210\1\u0211\3\u020f\5\34"+
    "\1\u0212\12\u020f\1\u0213\24\34\4\u0213\1\34\1\u0214\1\u0215"+
    "\3\u0213\5\34\1\u0216\12\u0213\32\0\1\u01e8\56\0\1\u01ec"+
    "\25\0\5\34\1\u0217\16\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\13\0\14\34\1\u0218\7\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\44\0\1\u01f2"+
    "\25\0\24\34\4\0\1\34\1\73\1\34\3\0\3\34"+
    "\1\u0219\1\34\1\74\12\0\1\u021a\24\34\4\u021a\1\34"+
    "\1\u021b\1\u021c\3\u021a\5\34\1\u021d\12\u021a\32\0\1\u01f8"+
    "\25\0\7\34\1\u021e\14\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\44\0\1\u01fd\24\0\1\u021f\24\34"+
    "\4\u021f\1\34\1\u0220\1\u0221\3\u021f\5\34\1\u0222\12\u021f"+
    "\1\0\7\34\1\u0223\14\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\13\0\7\34\1\u0224\14\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\44\0\1\u0204"+
    "\24\0\1\u0225\24\34\4\u0225\1\34\1\u0226\1\u0227\3\u0225"+
    "\5\34\1\u0228\12\u0225\1\u0229\24\34\4\u0229\1\34\1\u022a"+
    "\1\u022b\3\u0229\5\34\1\u022c\12\u0229\32\0\1\u020a\24\0"+
    "\1\u022d\24\34\4\u022d\1\34\1\u022e\1\u022f\3\u022d\5\34"+
    "\1\u0230\12\u022d\1\0\1\u0231\23\34\4\0\1\34\1\73"+
    "\1\34\3\0\5\34\1\74\44\0\1\u0210\56\0\1\u0214"+
    "\25\0\4\34\1\u0232\17\34\4\0\1\34\1\73\1\34"+
    "\3\0\5\34\1\74\12\0\1\u0233\24\34\4\u0233\1\34"+
    "\1\u0234\1\u0235\3\u0233\5\34\1\u0236\12\u0233\1\0\7\34"+
    "\1\u0237\14\34\4\0\1\34\1\73\1\34\3\0\5\34"+
    "\1\74\44\0\1\u021b\24\0\1\u0238\24\34\4\u0238\1\34"+
    "\1\u0239\1\u023a\3\u0238\5\34\1\u023b\12\u0238\32\0\1\u0220"+
    "\24\0\1\u023c\24\34\4\u023c\1\34\1\u023d\1\u023e\3\u023c"+
    "\5\34\1\u023f\12\u023c\1\u0240\24\34\4\u0240\1\34\1\u0241"+
    "\1\u0242\3\u0240\5\34\1\u0243\12\u0240\32\0\1\u0226\56\0"+
    "\1\u022a\56\0\1\u022e\25\0\14\34\1\u0244\7\34\4\0"+
    "\1\34\1\73\1\34\3\0\5\34\1\74\12\0\1\u0245"+
    "\24\34\4\u0245\1\34\1\u0246\1\u0247\3\u0245\5\34\1\u0248"+
    "\12\u0245\32\0\1\u0234\24\0\1\u0249\24\34\4\u0249\1\34"+
    "\1\u024a\1\u024b\3\u0249\5\34\1\u024c\12\u0249\32\0\1\u0239"+
    "\56\0\1\u023d\56\0\1\u0241\24\0\1\u024d\24\34\4\u024d"+
    "\1\34\1\u024e\1\u024f\3\u024d\5\34\1\u0250\12\u024d\32\0"+
    "\1\u0246\56\0\1\u024a\56\0\1\u024e\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18142];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\3\1\1\11\3\1\1\11\44\1\1\11\1\1"+
    "\1\11\76\1\1\0\1\1\1\0\13\1\1\11\21\1"+
    "\1\11\10\1\1\11\5\1\1\11\20\1\1\11\6\1"+
    "\1\11\24\1\1\0\12\1\1\11\4\1\1\11\13\1"+
    "\1\11\10\1\1\11\10\1\1\11\6\1\1\11\4\1"+
    "\1\11\10\1\1\11\13\1\1\11\3\1\1\11\4\1"+
    "\1\11\6\1\1\11\15\1\1\11\3\1\1\11\4\1"+
    "\1\11\3\1\1\11\5\1\1\11\5\1\1\11\5\1"+
    "\1\11\3\1\1\11\5\1\1\11\4\1\1\11\15\1"+
    "\1\11\4\1\1\11\6\1\1\11\20\1\1\11\6\1"+
    "\1\11\3\1\1\11\6\1\1\11\3\1\1\11\3\1"+
    "\1\11\4\1\1\11\4\1\1\11\3\1\1\11\4\1"+
    "\1\11\11\1\1\11\6\1\1\11\7\1\1\11\3\1"+
    "\1\11\4\1\1\11\5\1\1\11\3\1\1\11\5\1"+
    "\1\11\5\1\1\11\4\1\1\11\6\1\1\11\5\1"+
    "\1\11\5\1\1\11\3\1\1\11\6\1\1\11\4\1"+
    "\1\11\5\1\1\11\3\1\1\11\3\1\1\11\5\1"+
    "\1\11\4\1\1\11\3\1\1\11\3\1\1\11\4\1"+
    "\1\11\3\1\1\11\3\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[592];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Xbas99Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 60: 
          { return Xbas99Types.W_RUN;
          }
        case 164: break;
        case 106: 
          { yypushback(1); return Xbas99Types.W_INPUT;
          }
        case 165: break;
        case 38: 
          { yypushback(1); return Xbas99Types.W_GO;
          }
        case 166: break;
        case 10: 
          { return Xbas99Types.FLOAT;
          }
        case 167: break;
        case 31: 
          { yypushback(1); return Xbas99Types.W_ON;
          }
        case 168: break;
        case 89: 
          { return Xbas99Types.W_READ;
          }
        case 169: break;
        case 94: 
          { yypushback(1); return Xbas99Types.W_CLOSE;
          }
        case 170: break;
        case 54: 
          { return Xbas99Types.W_XOR;
          }
        case 171: break;
        case 76: 
          { yypushback(1); return Xbas99Types.W_CALL;
          }
        case 172: break;
        case 80: 
          { yypushback(1); return Xbas99Types.W_NEXT;
          }
        case 173: break;
        case 136: 
          { yypushback(1); return Xbas99Types.W_SUBEXIT;
          }
        case 174: break;
        case 6: 
          { yybegin(S); return Xbas99Types.WS;
          }
        case 175: break;
        case 146: 
          { yypushback(1); return Xbas99Types.W_UNTRACE;
          }
        case 176: break;
        case 101: 
          { return Xbas99Types.W_ERROR;
          }
        case 177: break;
        case 39: 
          { return Xbas99Types.W_GO;
          }
        case 178: break;
        case 55: 
          { yypushback(1); return Xbas99Types.W_LET;
          }
        case 179: break;
        case 44: 
          { return Xbas99Types.W_ALL;
          }
        case 180: break;
        case 32: 
          { return Xbas99Types.W_ON;
          }
        case 181: break;
        case 17: 
          { return Xbas99Types.OP_LT;
          }
        case 182: break;
        case 162: 
          { yypushback(1); return Xbas99Types.W_SEQUENTIAL;
          }
        case 183: break;
        case 132: 
          { yypushback(1); return Xbas99Types.W_UALPHA;
          }
        case 184: break;
        case 139: 
          { return Xbas99Types.W_NUMERIC;
          }
        case 185: break;
        case 149: 
          { return Xbas99Types.W_WARNING;
          }
        case 186: break;
        case 77: 
          { return Xbas99Types.W_CALL;
          }
        case 187: break;
        case 52: 
          { return Xbas99Types.W_FOR;
          }
        case 188: break;
        case 81: 
          { return Xbas99Types.W_NEXT;
          }
        case 189: break;
        case 4: 
          { return TokenType.BAD_CHARACTER;
          }
        case 190: break;
        case 142: 
          { yypushback(1); return Xbas99Types.W_DISPLAY;
          }
        case 191: break;
        case 1: 
          { return Xbas99Types.A_DATA;
          }
        case 192: break;
        case 93: 
          { return Xbas99Types.W_BREAK;
          }
        case 193: break;
        case 78: 
          { yypushback(1); return Xbas99Types.W_THEN;
          }
        case 194: break;
        case 64: 
          { return Xbas99Types.W_DIM;
          }
        case 195: break;
        case 121: 
          { return Xbas99Types.W_SUBEND;
          }
        case 196: break;
        case 159: 
          { return Xbas99Types.W_PERMANENT;
          }
        case 197: break;
        case 155: 
          { return Xbas99Types.W_VALIDATE;
          }
        case 198: break;
        case 46: 
          { return Xbas99Types.W_SUB;
          }
        case 199: break;
        case 158: 
          { yypushback(1); return Xbas99Types.W_PERMANENT;
          }
        case 200: break;
        case 157: 
          { return Xbas99Types.W_VARIABLE;
          }
        case 201: break;
        case 11: 
          { return Xbas99Types.NUMBER;
          }
        case 202: break;
        case 79: 
          { return Xbas99Types.W_THEN;
          }
        case 203: break;
        case 49: 
          { yypushback(1); return Xbas99Types.W_END;
          }
        case 204: break;
        case 8: 
          { return Xbas99Types.IDENT;
          }
        case 205: break;
        case 153: 
          { return Xbas99Types.W_RELATIVE;
          }
        case 206: break;
        case 112: 
          { yypushback(1); return Xbas99Types.W_DIGIT;
          }
        case 207: break;
        case 105: 
          { return Xbas99Types.W_PRINT;
          }
        case 208: break;
        case 15: 
          { return Xbas99Types.OP_SEMI;
          }
        case 209: break;
        case 9: 
          { return Xbas99Types.OP_NEG;
          }
        case 210: break;
        case 7: 
          { return Xbas99Types.LNUMBER;
          }
        case 211: break;
        case 82: 
          { yypushback(1); return Xbas99Types.W_OPEN;
          }
        case 212: break;
        case 110: 
          { yypushback(1); return Xbas99Types.W_GOSUB;
          }
        case 213: break;
        case 65: 
          { yypushback(1); return Xbas99Types.W_BASE;
          }
        case 214: break;
        case 2: 
          { return Xbas99Types.A_IMAGE;
          }
        case 215: break;
        case 135: 
          { return Xbas99Types.W_UPDATE;
          }
        case 216: break;
        case 57: 
          { yypushback(1); yybegin(REM); return Xbas99Types.W_REM;
          }
        case 217: break;
        case 115: 
          { return Xbas99Types.W_USING;
          }
        case 218: break;
        case 56: 
          { return Xbas99Types.W_LET;
          }
        case 219: break;
        case 73: 
          { return Xbas99Types.W_FUN_S;
          }
        case 220: break;
        case 117: 
          { return Xbas99Types.W_ACCEPT;
          }
        case 221: break;
        case 103: 
          { return Xbas99Types.W_FIXED;
          }
        case 222: break;
        case 119: 
          { return Xbas99Types.W_APPEND;
          }
        case 223: break;
        case 99: 
          { return Xbas99Types.W_ERASE;
          }
        case 224: break;
        case 29: 
          { yypushback(1); return Xbas99Types.W_TO;
          }
        case 225: break;
        case 41: 
          { yypushback(1); return Xbas99Types.W_AND;
          }
        case 226: break;
        case 83: 
          { return Xbas99Types.W_OPEN;
          }
        case 227: break;
        case 47: 
          { yypushback(1); return Xbas99Types.W_NOT;
          }
        case 228: break;
        case 97: 
          { return Xbas99Types.W_TRACE;
          }
        case 229: break;
        case 150: 
          { yypushback(1); return Xbas99Types.W_INTERNAL;
          }
        case 230: break;
        case 66: 
          { return Xbas99Types.W_BASE;
          }
        case 231: break;
        case 108: 
          { yypushback(1); yybegin(IMAGE); return Xbas99Types.W_IMAGE;
          }
        case 232: break;
        case 67: 
          { yypushback(1); return Xbas99Types.W_BEEP;
          }
        case 233: break;
        case 30: 
          { return Xbas99Types.W_TO;
          }
        case 234: break;
        case 138: 
          { yypushback(1); return Xbas99Types.W_NUMERIC;
          }
        case 235: break;
        case 145: 
          { return Xbas99Types.W_UNBREAK;
          }
        case 236: break;
        case 127: 
          { return Xbas99Types.W_LINPUT;
          }
        case 237: break;
        case 120: 
          { yypushback(1); return Xbas99Types.W_SUBEND;
          }
        case 238: break;
        case 61: 
          { yypushback(1); return Xbas99Types.W_DEF;
          }
        case 239: break;
        case 123: 
          { return Xbas99Types.W_OPTION;
          }
        case 240: break;
        case 24: 
          { return Xbas99Types.SIDENT;
          }
        case 241: break;
        case 131: 
          { return Xbas99Types.W_DELETE;
          }
        case 242: break;
        case 100: 
          { yypushback(1); return Xbas99Types.W_ERROR;
          }
        case 243: break;
        case 68: 
          { return Xbas99Types.W_BEEP;
          }
        case 244: break;
        case 134: 
          { yypushback(1); return Xbas99Types.W_UPDATE;
          }
        case 245: break;
        case 3: 
          { return Xbas99Types.A_REM;
          }
        case 246: break;
        case 148: 
          { yypushback(1); return Xbas99Types.W_WARNING;
          }
        case 247: break;
        case 90: 
          { yypushback(1); yybegin(DATA); return Xbas99Types.W_DATA;
          }
        case 248: break;
        case 19: 
          { return Xbas99Types.OP_HASH;
          }
        case 249: break;
        case 50: 
          { return Xbas99Types.W_END;
          }
        case 250: break;
        case 107: 
          { return Xbas99Types.W_INPUT;
          }
        case 251: break;
        case 141: 
          { return Xbas99Types.W_RESTORE;
          }
        case 252: break;
        case 118: 
          { yypushback(1); return Xbas99Types.W_APPEND;
          }
        case 253: break;
        case 92: 
          { yypushback(1); return Xbas99Types.W_BREAK;
          }
        case 254: break;
        case 95: 
          { return Xbas99Types.W_CLOSE;
          }
        case 255: break;
        case 86: 
          { yypushback(1); return Xbas99Types.W_GOTO;
          }
        case 256: break;
        case 18: 
          { return Xbas99Types.OP_GT;
          }
        case 257: break;
        case 12: 
          { return Xbas99Types.OP_ARITH;
          }
        case 258: break;
        case 129: 
          { return Xbas99Types.W_RETURN;
          }
        case 259: break;
        case 26: 
          { return Xbas99Types.OP_SEP;
          }
        case 260: break;
        case 21: 
          { return Xbas99Types.OP_RPAREN;
          }
        case 261: break;
        case 23: 
          { yybegin(REM); return Xbas99Types.OP_EXCL;
          }
        case 262: break;
        case 27: 
          { yypushback(1); return Xbas99Types.W_AT;
          }
        case 263: break;
        case 116: 
          { yypushback(1); return Xbas99Types.W_ACCEPT;
          }
        case 264: break;
        case 126: 
          { yypushback(1); return Xbas99Types.W_LINPUT;
          }
        case 265: break;
        case 35: 
          { return Xbas99Types.W_FUN_C;
          }
        case 266: break;
        case 22: 
          { return Xbas99Types.OP_AMP;
          }
        case 267: break;
        case 151: 
          { return Xbas99Types.W_INTERNAL;
          }
        case 268: break;
        case 130: 
          { yypushback(1); return Xbas99Types.W_DELETE;
          }
        case 269: break;
        case 42: 
          { return Xbas99Types.W_AND;
          }
        case 270: break;
        case 33: 
          { yypushback(1); return Xbas99Types.W_OR;
          }
        case 271: break;
        case 74: 
          { yypushback(1); return Xbas99Types.W_SIZE;
          }
        case 272: break;
        case 59: 
          { yypushback(1); return Xbas99Types.W_RUN;
          }
        case 273: break;
        case 14: 
          { return Xbas99Types.OP_COLON;
          }
        case 274: break;
        case 137: 
          { return Xbas99Types.W_SUBEXIT;
          }
        case 275: break;
        case 5: 
          { yybegin(YYINITIAL); return Xbas99Types.CRLF;
          }
        case 276: break;
        case 48: 
          { return Xbas99Types.W_NOT;
          }
        case 277: break;
        case 28: 
          { return Xbas99Types.W_AT;
          }
        case 278: break;
        case 147: 
          { return Xbas99Types.W_UNTRACE;
          }
        case 279: break;
        case 36: 
          { yypushback(1); return Xbas99Types.W_IF;
          }
        case 280: break;
        case 87: 
          { return Xbas99Types.W_GOTO;
          }
        case 281: break;
        case 104: 
          { yypushback(1); return Xbas99Types.W_PRINT;
          }
        case 282: break;
        case 53: 
          { yypushback(1); return Xbas99Types.W_XOR;
          }
        case 283: break;
        case 125: 
          { return Xbas99Types.W_OUTPUT;
          }
        case 284: break;
        case 34: 
          { return Xbas99Types.W_OR;
          }
        case 285: break;
        case 20: 
          { return Xbas99Types.OP_LPAREN;
          }
        case 286: break;
        case 43: 
          { yypushback(1); return Xbas99Types.W_ALL;
          }
        case 287: break;
        case 122: 
          { yypushback(1); return Xbas99Types.W_OPTION;
          }
        case 288: break;
        case 62: 
          { return Xbas99Types.W_DEF;
          }
        case 289: break;
        case 37: 
          { return Xbas99Types.W_IF;
          }
        case 290: break;
        case 40: 
          { return Xbas99Types.W_FUN_N;
          }
        case 291: break;
        case 69: 
          { yypushback(1); return Xbas99Types.W_STOP;
          }
        case 292: break;
        case 75: 
          { return Xbas99Types.W_SIZE;
          }
        case 293: break;
        case 114: 
          { yypushback(1); return Xbas99Types.W_USING;
          }
        case 294: break;
        case 144: 
          { yypushback(1); return Xbas99Types.W_UNBREAK;
          }
        case 295: break;
        case 143: 
          { return Xbas99Types.W_DISPLAY;
          }
        case 296: break;
        case 102: 
          { yypushback(1); return Xbas99Types.W_FIXED;
          }
        case 297: break;
        case 98: 
          { yypushback(1); return Xbas99Types.W_ERASE;
          }
        case 298: break;
        case 58: 
          { yybegin(REM); return Xbas99Types.W_REM;
          }
        case 299: break;
        case 51: 
          { yypushback(1); return Xbas99Types.W_FOR;
          }
        case 300: break;
        case 113: 
          { return Xbas99Types.W_DIGIT;
          }
        case 301: break;
        case 96: 
          { yypushback(1); return Xbas99Types.W_TRACE;
          }
        case 302: break;
        case 84: 
          { yypushback(1); return Xbas99Types.W_ELSE;
          }
        case 303: break;
        case 63: 
          { yypushback(1); return Xbas99Types.W_DIM;
          }
        case 304: break;
        case 128: 
          { yypushback(1); return Xbas99Types.W_RETURN;
          }
        case 305: break;
        case 25: 
          { return Xbas99Types.QSTRING;
          }
        case 306: break;
        case 111: 
          { return Xbas99Types.W_GOSUB;
          }
        case 307: break;
        case 109: 
          { yybegin(IMAGE); return Xbas99Types.W_IMAGE;
          }
        case 308: break;
        case 71: 
          { yypushback(1); return Xbas99Types.W_STEP;
          }
        case 309: break;
        case 16: 
          { return Xbas99Types.OP_EQ;
          }
        case 310: break;
        case 70: 
          { return Xbas99Types.W_STOP;
          }
        case 311: break;
        case 133: 
          { return Xbas99Types.W_UALPHA;
          }
        case 312: break;
        case 45: 
          { yypushback(1); return Xbas99Types.W_SUB;
          }
        case 313: break;
        case 160: 
          { yypushback(1); return Xbas99Types.W_RANDOMIZE;
          }
        case 314: break;
        case 154: 
          { yypushback(1); return Xbas99Types.W_VALIDATE;
          }
        case 315: break;
        case 163: 
          { return Xbas99Types.W_SEQUENTIAL;
          }
        case 316: break;
        case 140: 
          { yypushback(1); return Xbas99Types.W_RESTORE;
          }
        case 317: break;
        case 88: 
          { yypushback(1); return Xbas99Types.W_READ;
          }
        case 318: break;
        case 124: 
          { yypushback(1); return Xbas99Types.W_OUTPUT;
          }
        case 319: break;
        case 156: 
          { yypushback(1); return Xbas99Types.W_VARIABLE;
          }
        case 320: break;
        case 91: 
          { yybegin(DATA); return Xbas99Types.W_DATA;
          }
        case 321: break;
        case 85: 
          { return Xbas99Types.W_ELSE;
          }
        case 322: break;
        case 161: 
          { return Xbas99Types.W_RANDOMIZE;
          }
        case 323: break;
        case 72: 
          { return Xbas99Types.W_STEP;
          }
        case 324: break;
        case 13: 
          { return Xbas99Types.OP_COMMA;
          }
        case 325: break;
        case 152: 
          { yypushback(1); return Xbas99Types.W_RELATIVE;
          }
        case 326: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
