/* The following code was generated by JFlex 1.4.3 on 8/9/15 9:05 PM */

package net.endlos.xdt99.xas99;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import net.endlos.xdt99.xas99.psi.Xas99Types;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/9/15 9:05 PM from the specification file
 * <tt>/home/ralph/prj/ti99/xdt99/ide/idea/src/net/endlos/xdt99/xas99/Xas99.flex</tt>
 */
class Xas99Lexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ARGUMENTS = 6;
  public static final int MNEMONIC = 2;
  public static final int YYINITIAL = 0;
  public static final int PREPROC = 10;
  public static final int COMMENT = 8;
  public static final int MNEMONICO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\51\1\52\2\0\1\35\22\0\1\51\1\0\1\43\1\0"+
    "\1\62\2\47\1\42\1\60\1\61\1\34\1\55\1\53\1\56\1\33"+
    "\1\47\1\41\1\45\4\46\4\44\1\40\1\36\2\0\1\37\1\0"+
    "\1\54\1\1\1\2\1\3\1\24\1\12\1\30\1\14\1\16\1\26"+
    "\1\11\1\27\1\17\1\4\1\21\1\5\1\20\1\13\1\23\1\7"+
    "\1\15\1\32\1\6\1\25\1\22\1\31\1\10\3\0\1\47\1\50"+
    "\1\0\1\1\1\2\1\3\1\24\1\12\1\30\1\14\1\16\1\26"+
    "\1\11\1\27\1\17\1\4\1\21\1\5\1\20\1\13\1\23\1\7"+
    "\1\15\1\32\1\6\1\25\1\22\1\31\1\10\1\0\1\47\1\0"+
    "\1\57\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\4"+
    "\1\7\1\10\1\7\2\1\1\7\6\1\1\10\5\1"+
    "\1\11\1\12\2\13\1\14\2\1\1\15\2\1\1\16"+
    "\1\1\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\2\27\2\30\1\7\2\0\1\31\1\0\1\10"+
    "\1\0\1\7\11\0\1\7\12\0\2\32\4\0\1\32"+
    "\6\0\1\31\7\0\1\33\12\0\2\34\2\15\1\0"+
    "\1\35\1\0\1\35\2\0\1\10\1\0\1\36\2\0"+
    "\1\37\4\0\1\7\1\40\4\0\1\41\3\0\1\42"+
    "\6\0\1\33\1\43\2\0\1\44\2\0\1\10\2\0"+
    "\1\45\4\0\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\7\0\1\55\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0132\0\u0264\0\u0297\0\u02ca"+
    "\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u062d\0\u0660\0\u0693\0\u0132\0\u06c6\0\u06f9\0\u072c\0\u075f"+
    "\0\u0792\0\u0132\0\u07c5\0\u0132\0\u0132\0\u0132\0\u0132\0\u0132"+
    "\0\u0132\0\u0132\0\u0132\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4"+
    "\0\u08f7\0\u092a\0\u0132\0\u095d\0\u0990\0\u09c3\0\u0132\0\u09f6"+
    "\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e"+
    "\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26"+
    "\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0132\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd\0\u0ff0\0\u1023"+
    "\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb"+
    "\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320\0\u1353"+
    "\0\u1386\0\u13b9\0\u13ec\0\u0660\0\u141f\0\u06c6\0\u06f9\0\u075f"+
    "\0\u1452\0\u0792\0\u0132\0\u06c6\0\u06f9\0\u0132\0\u1485\0\u0132"+
    "\0\u14b8\0\u14eb\0\u0132\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea"+
    "\0\u0132\0\u161d\0\u1650\0\u1683\0\u16b6\0\u0132\0\u16e9\0\u171c"+
    "\0\u174f\0\u0132\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881"+
    "\0\u0132\0\u0132\0\u18b4\0\u18e7\0\u0132\0\u191a\0\u194d\0\u1980"+
    "\0\u19b3\0\u19e6\0\u0132\0\u1a19\0\u1a4c\0\u1a7f\0\u1ab2\0\u0132"+
    "\0\u0132\0\u0132\0\u0132\0\u0132\0\u0132\0\u0132\0\u1ae5\0\u1b18"+
    "\0\u1b4b\0\u1b7e\0\u1bb1\0\u1be4\0\u1c17\0\u0132\0\u1c4a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\32\10\1\7\1\11\1\12\1\13\11\7\1\10"+
    "\1\14\1\15\11\7\1\16\1\17\1\20\1\21\1\22"+
    "\1\7\1\23\1\7\1\24\1\25\2\7\1\26\1\7"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\7\1\35"+
    "\3\7\1\36\1\37\1\7\1\12\1\13\12\7\1\40"+
    "\1\15\45\7\1\12\1\13\12\7\1\41\1\15\11\7"+
    "\22\42\1\43\7\42\1\7\1\44\1\12\1\13\1\45"+
    "\1\46\1\47\1\50\1\51\3\47\1\52\1\42\1\53"+
    "\1\15\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\35\64\1\12\1\13\12\64\1\65\1\15\10\64"+
    "\35\66\1\12\1\13\12\66\1\67\1\15\10\66\64\0"+
    "\32\10\6\0\1\10\2\0\3\10\1\0\1\10\12\0"+
    "\35\11\1\0\14\11\1\0\10\11\52\0\1\15\10\0"+
    "\35\13\1\0\14\13\1\0\10\13\36\0\1\13\12\0"+
    "\1\14\13\0\1\70\2\0\1\71\13\0\1\72\4\0"+
    "\1\73\43\0\1\74\2\0\1\74\4\0\1\75\11\0"+
    "\1\76\33\0\1\77\2\0\1\100\1\0\1\101\1\102"+
    "\1\0\1\103\4\0\1\104\6\0\1\73\1\105\40\0"+
    "\1\106\12\0\1\107\65\0\1\110\41\0\1\111\2\0"+
    "\1\112\2\0\1\112\1\0\1\113\2\0\1\114\1\0"+
    "\1\115\3\0\1\116\1\0\1\117\41\0\1\120\1\121"+
    "\4\0\1\122\1\0\1\123\1\0\1\124\1\125\1\0"+
    "\1\126\47\0\1\127\4\0\1\130\5\0\1\131\43\0"+
    "\1\132\7\0\1\133\13\0\1\134\41\0\1\135\15\0"+
    "\1\136\1\137\1\140\1\141\35\0\1\142\5\0\1\101"+
    "\2\0\1\103\55\0\1\143\4\0\1\144\55\0\1\145"+
    "\62\0\1\146\1\0\1\147\2\0\1\150\2\0\1\151"+
    "\46\0\1\152\3\0\1\71\1\0\1\101\2\0\1\153"+
    "\7\0\1\154\3\0\1\155\36\0\1\156\16\0\1\157"+
    "\2\0\1\160\57\0\1\161\53\0\1\162\13\0\1\163"+
    "\72\0\1\13\12\0\1\40\47\0\1\13\12\0\1\41"+
    "\12\0\32\42\6\0\1\42\2\0\3\42\1\0\1\42"+
    "\13\0\32\42\6\0\1\164\2\0\1\164\1\165\1\164"+
    "\1\0\1\42\13\0\3\166\6\0\1\166\11\0\1\166"+
    "\3\0\1\166\10\0\1\166\2\0\3\166\55\0\1\167"+
    "\3\0\1\167\56\0\1\47\2\0\3\47\14\0\35\170"+
    "\1\0\4\170\1\171\7\170\1\0\10\170\35\172\1\0"+
    "\5\172\1\173\6\172\1\0\10\172\1\0\22\42\1\43"+
    "\7\42\1\0\1\44\1\0\1\13\1\174\1\175\1\47"+
    "\1\170\1\172\3\47\1\52\1\42\1\41\1\0\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\35\64"+
    "\1\0\14\64\1\0\45\64\1\0\1\13\12\64\1\65"+
    "\1\0\10\64\35\66\1\0\14\66\1\0\45\66\1\0"+
    "\1\13\12\66\1\67\1\0\10\66\7\0\1\176\76\0"+
    "\1\177\63\0\1\110\45\0\1\200\100\0\1\201\52\0"+
    "\1\202\50\0\1\203\14\0\1\204\54\0\1\205\53\0"+
    "\1\203\100\0\1\206\64\0\1\176\44\0\1\207\63\0"+
    "\1\210\105\0\1\211\57\0\1\73\41\0\1\132\2\0"+
    "\1\132\55\0\1\210\74\0\1\212\50\0\1\213\3\0"+
    "\1\214\15\0\1\215\36\0\1\216\62\0\1\216\1\0"+
    "\1\216\6\0\1\217\4\0\1\216\63\0\1\220\62\0"+
    "\1\132\45\0\1\132\14\0\1\132\55\0\1\132\64\0"+
    "\1\132\57\0\1\132\62\0\1\132\2\0\1\132\50\0"+
    "\1\132\1\0\1\132\4\0\1\132\62\0\1\221\102\0"+
    "\1\200\54\0\1\222\60\0\1\223\55\0\1\224\46\0"+
    "\1\206\73\0\1\225\53\0\1\213\77\0\1\226\46\0"+
    "\1\226\2\0\1\227\67\0\1\230\66\0\1\231\56\0"+
    "\1\176\66\0\1\232\2\0\1\203\62\0\1\233\51\0"+
    "\1\234\100\0\1\235\57\0\1\236\52\0\1\237\50\0"+
    "\1\240\15\0\1\206\6\0\1\235\37\0\1\241\63\0"+
    "\1\211\105\0\1\242\34\0\1\240\2\0\1\176\71\0"+
    "\1\243\1\0\1\244\62\0\1\222\62\0\1\245\1\0"+
    "\1\246\71\0\1\247\33\0\32\42\6\0\1\164\2\0"+
    "\1\42\2\164\1\0\1\42\54\0\1\170\34\0\1\200"+
    "\66\0\1\176\54\0\1\250\101\0\1\243\45\0\1\251"+
    "\72\0\1\251\57\0\1\252\6\0\1\252\34\0\1\77"+
    "\65\0\1\176\100\0\1\253\54\0\1\254\65\0\1\254"+
    "\72\0\1\251\34\0\1\176\101\0\1\222\56\0\1\243"+
    "\64\0\1\243\65\0\1\252\66\0\1\255\51\0\1\222"+
    "\57\0\1\222\64\0\1\256\63\0\1\252\65\0\1\252"+
    "\43\0\1\250\76\0\1\176\65\0\1\222\57\0\1\257"+
    "\57\0\1\252\57\0\1\260\77\0\1\261\50\0\1\262"+
    "\1\0\1\263\4\0\1\264\2\0\1\265\50\0\1\243"+
    "\62\0\1\266\76\0\1\267\47\0\1\266\61\0\1\266"+
    "\2\0\1\266\57\0\1\266\11\0\1\265\50\0\1\267"+
    "\100\0\1\266\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7293];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\5\1\1\11\26\1\1\11\5\1\1\11"+
    "\1\1\10\11\5\1\2\0\1\11\1\0\1\1\1\0"+
    "\1\11\11\0\1\1\12\0\2\1\4\0\1\11\6\0"+
    "\1\1\7\0\1\1\12\0\4\1\1\0\1\1\1\0"+
    "\1\11\2\0\1\11\1\0\1\11\2\0\1\11\4\0"+
    "\1\1\1\11\4\0\1\11\3\0\1\11\6\0\2\11"+
    "\2\0\1\11\2\0\1\1\2\0\1\11\4\0\7\11"+
    "\7\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[183];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Xas99Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { return Xas99Types.DIR_S;
          }
        case 46: break;
        case 29: 
          { yybegin(ARGUMENTS); return Xas99Types.TEXT;
          }
        case 47: break;
        case 15: 
          { yybegin(ARGUMENTS); return Xas99Types.OP_SEP;
          }
        case 48: break;
        case 5: 
          { return Xas99Types.EOL_COMMENT;
          }
        case 49: break;
        case 43: 
          { return Xas99Types.INSTR_VIII_I;
          }
        case 50: break;
        case 20: 
          { yybegin(ARGUMENTS); return Xas99Types.OP_LPAREN;
          }
        case 51: break;
        case 38: 
          { return Xas99Types.DIR_ES;
          }
        case 52: break;
        case 42: 
          { return Xas99Types.INSTR_VIII_R;
          }
        case 53: break;
        case 21: 
          { yybegin(ARGUMENTS); return Xas99Types.OP_RPAREN;
          }
        case 54: break;
        case 33: 
          { return Xas99Types.INSTR_V;
          }
        case 55: break;
        case 28: 
          { yybegin(ARGUMENTS); return Xas99Types.REGISTER;
          }
        case 56: break;
        case 22: 
          { yybegin(ARGUMENTS); return Xas99Types.OP_LC;
          }
        case 57: break;
        case 41: 
          { return Xas99Types.INSTR_IV;
          }
        case 58: break;
        case 13: 
          { yybegin(ARGUMENTS); return Xas99Types.INT;
          }
        case 59: break;
        case 23: 
          { yybegin(YYINITIAL); return Xas99Types.EOL_COMMENT;
          }
        case 60: break;
        case 3: 
          { return Xas99Types.LINE_COMMENT;
          }
        case 61: break;
        case 2: 
          { return Xas99Types.IDENT;
          }
        case 62: break;
        case 4: 
          { yybegin(YYINITIAL); return Xas99Types.CRLF;
          }
        case 63: break;
        case 36: 
          { return Xas99Types.DIR_L;
          }
        case 64: break;
        case 7: 
          { return Xas99Types.INSTR_I;
          }
        case 65: break;
        case 24: 
          { return Xas99Types.PREP_ARG;
          }
        case 66: break;
        case 44: 
          { return Xas99Types.DIR_EO;
          }
        case 67: break;
        case 26: 
          { return Xas99Types.INSTR_II;
          }
        case 68: break;
        case 34: 
          { yybegin(MNEMONICO); return Xas99Types.DIR_O;
          }
        case 69: break;
        case 19: 
          { yybegin(ARGUMENTS); return Xas99Types.OP_NOT;
          }
        case 70: break;
        case 39: 
          { yybegin(MNEMONICO); return Xas99Types.DIR_X;
          }
        case 71: break;
        case 25: 
          { return Xas99Types.INSTR_VIII;
          }
        case 72: break;
        case 32: 
          { return Xas99Types.INSTR_IX;
          }
        case 73: break;
        case 30: 
          { return Xas99Types.DIR_E;
          }
        case 74: break;
        case 9: 
          { yybegin(ARGUMENTS); return Xas99Types.FIELD_SEP;
          }
        case 75: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 76: break;
        case 45: 
          { yybegin(PREPROC); return Xas99Types.PREP;
          }
        case 77: break;
        case 6: 
          { yybegin(MNEMONIC); return Xas99Types.FIELD_SEP;
          }
        case 78: break;
        case 27: 
          { yybegin(MNEMONICO); return Xas99Types.INSTR_O;
          }
        case 79: break;
        case 12: 
          { yybegin(ARGUMENTS); return Xas99Types.OP_AST;
          }
        case 80: break;
        case 10: 
          { yybegin(COMMENT); return Xas99Types.FIELD_SEP;
          }
        case 81: break;
        case 17: 
          { yybegin(ARGUMENTS); return Xas99Types.OP_PLUS;
          }
        case 82: break;
        case 31: 
          { return Xas99Types.INSTR_III;
          }
        case 83: break;
        case 35: 
          { return Xas99Types.INSTR_IX_X;
          }
        case 84: break;
        case 14: 
          { yybegin(ARGUMENTS); return Xas99Types.OP_MISC;
          }
        case 85: break;
        case 16: 
          { yybegin(ARGUMENTS); return Xas99Types.OP_AT;
          }
        case 86: break;
        case 40: 
          { yybegin(MNEMONICO); return Xas99Types.INSTR_VII;
          }
        case 87: break;
        case 11: 
          { yybegin(ARGUMENTS); return Xas99Types.IDENT;
          }
        case 88: break;
        case 8: 
          { return Xas99Types.INSTR_VI;
          }
        case 89: break;
        case 18: 
          { yybegin(ARGUMENTS); return Xas99Types.OP_MINUS;
          }
        case 90: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
