/* The following code was generated by JFlex 1.4.3 on 9/18/15 5:31 PM */

package net.endlos.xdt99.xas99;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import net.endlos.xdt99.xas99.psi.Xas99Types;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/18/15 5:31 PM from the specification file
 * <tt>/home/ralph/ti99/xdt99/ide/idea/src/net/endlos/xdt99/xas99/Xas99.flex</tt>
 */
class Xas99Lexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ARGUMENTS = 6;
  public static final int MNEMONIC = 2;
  public static final int YYINITIAL = 0;
  public static final int PREPROC = 10;
  public static final int COMMENT = 8;
  public static final int MNEMONICO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\60\2\0\1\36\22\0\1\56\1\40\1\46\1\53"+
    "\1\54\1\51\1\55\1\45\1\65\1\66\1\35\1\62\1\52\1\63"+
    "\1\33\1\55\1\44\1\47\4\50\4\34\1\43\1\37\2\0\1\42"+
    "\1\0\1\61\1\1\1\2\1\3\1\24\1\12\1\30\1\14\1\16"+
    "\1\26\1\11\1\27\1\17\1\4\1\21\1\5\1\20\1\13\1\23"+
    "\1\7\1\15\1\32\1\6\1\25\1\22\1\31\1\10\3\0\1\55"+
    "\1\41\1\0\1\1\1\2\1\3\1\24\1\12\1\30\1\14\1\16"+
    "\1\26\1\11\1\27\1\17\1\4\1\21\1\5\1\20\1\13\1\23"+
    "\1\7\1\15\1\32\1\6\1\25\1\22\1\31\1\10\1\0\1\55"+
    "\1\0\1\64\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\2\1\6"+
    "\1\7\1\4\1\10\1\11\1\10\3\12\1\10\6\12"+
    "\1\11\4\12\1\1\1\12\1\13\1\14\1\2\1\15"+
    "\1\16\4\1\1\17\1\20\1\1\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\10\2\12\1\34\2\12\1\11\1\12\1\10\11\12"+
    "\1\10\12\12\2\35\4\12\1\35\6\12\1\34\7\12"+
    "\1\36\7\12\1\37\2\40\2\15\1\0\1\41\1\0"+
    "\1\41\1\42\1\11\2\12\1\43\2\12\1\44\4\12"+
    "\1\10\1\45\4\12\1\46\3\12\1\47\6\12\1\36"+
    "\1\50\4\12\1\11\1\12\1\51\1\12\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61";

  private static int [] zzUnpackAction() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u014a\0\u0294\0\u014a\0\u02cb"+
    "\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b"+
    "\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u014a"+
    "\0\u07f3\0\u082a\0\u0861\0\u0898\0\u014a\0\u014a\0\u08cf\0\u014a"+
    "\0\u074e\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u0906"+
    "\0\u093d\0\u014a\0\u0974\0\u09ab\0\u09e2\0\u03de\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u03de\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1"+
    "\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41"+
    "\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u03de\0\u108b\0\u10c2"+
    "\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243\0\u127a"+
    "\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432"+
    "\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u06a9\0\u0181\0\u1545\0\u07f3"+
    "\0\u082a\0\u0861\0\u157c\0\u0898\0\u014a\0\u08cf\0\u03de\0\u15b3"+
    "\0\u15ea\0\u03de\0\u1621\0\u1658\0\u03de\0\u168f\0\u16c6\0\u16fd"+
    "\0\u1734\0\u176b\0\u03de\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u03de"+
    "\0\u187e\0\u18b5\0\u18ec\0\u03de\0\u1923\0\u195a\0\u1991\0\u19c8"+
    "\0\u19ff\0\u1a36\0\u03de\0\u03de\0\u1a6d\0\u1aa4\0\u1adb\0\u1b12"+
    "\0\u1b49\0\u1b80\0\u03de\0\u1bb7\0\u03de\0\u03de\0\u03de\0\u03de"+
    "\0\u03de\0\u03de\0\u03de\0\u03de";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\32\10\2\7\1\11\1\12\1\13\1\14\1\10"+
    "\1\7\1\15\12\7\2\16\1\17\7\7\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\25\1\27\1\30"+
    "\2\25\1\31\1\25\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\25\1\40\3\25\1\41\1\42\2\7\1\12"+
    "\1\13\1\43\1\25\14\7\2\44\1\17\44\7\1\12"+
    "\1\13\16\7\2\45\1\17\7\7\22\10\1\46\7\10"+
    "\1\7\1\47\1\50\1\12\1\13\1\14\1\10\1\51"+
    "\1\52\1\47\1\53\1\54\2\47\1\55\1\56\1\57"+
    "\1\60\1\55\1\61\1\45\1\17\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\36\70\1\12\1\13\20\70\1\17"+
    "\6\70\36\71\1\12\1\13\12\71\1\72\3\71\1\61"+
    "\1\45\1\17\6\71\67\0\35\10\4\0\1\10\2\0"+
    "\6\10\1\0\1\10\13\0\36\11\1\0\21\11\1\0"+
    "\6\11\60\0\1\17\6\0\36\13\1\0\21\13\1\0"+
    "\6\13\35\10\3\0\1\14\1\10\2\0\6\10\1\0"+
    "\1\10\71\0\2\16\7\0\2\25\1\73\2\25\1\74"+
    "\13\25\1\75\4\25\1\76\6\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\3\25\1\77\3\25\1\100"+
    "\2\25\1\100\4\25\1\101\11\25\1\102\3\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\2\25\1\103"+
    "\2\25\1\104\1\25\1\105\1\106\1\25\1\107\4\25"+
    "\1\110\6\25\1\76\1\111\5\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\5\25\1\112\12\25\1\113"+
    "\14\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\23\25\1\114\11\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\35\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\2\25\1\115\2\25\1\116\2\25\1\116"+
    "\1\25\1\117\2\25\1\120\1\25\1\121\3\25\1\122"+
    "\1\25\1\123\7\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\4\25\1\124\1\125\4\25\1\126\1\25"+
    "\1\127\1\25\1\130\1\131\1\25\1\132\13\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\6\25\1\133"+
    "\4\25\1\134\5\25\1\135\13\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\2\25\1\136\7\25\1\137"+
    "\13\25\1\140\6\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\5\25\1\141\15\25\1\142\1\143\1\144"+
    "\1\145\6\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\1\25\1\146\5\25\1\105\2\25\1\107\22\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\5\25"+
    "\1\147\4\25\1\150\22\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\5\25\1\151\27\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\5\25\1\152\1\25"+
    "\1\153\2\25\1\154\2\25\1\155\17\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\1\25\1\156\3\25"+
    "\1\74\1\25\1\105\2\25\1\157\7\25\1\160\3\25"+
    "\1\161\6\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\21\25\1\162\2\25\1\163\10\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\21\25\1\164\13\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\14\0\32\165"+
    "\1\0\1\165\7\0\1\165\2\0\2\165\16\0\35\25"+
    "\3\0\1\43\1\25\2\0\6\25\1\0\1\25\71\0"+
    "\2\44\65\0\2\45\7\0\34\10\1\166\4\0\1\10"+
    "\2\0\1\166\2\10\1\167\1\166\1\10\1\0\1\10"+
    "\47\0\1\47\7\0\1\47\2\0\2\47\17\0\3\170"+
    "\6\0\1\170\11\0\1\170\3\0\1\170\3\0\1\170"+
    "\7\0\1\170\2\0\2\170\62\0\1\171\2\0\1\171"+
    "\17\0\36\172\1\0\6\172\1\173\12\172\1\0\6\172"+
    "\36\174\1\0\7\174\1\175\11\174\1\0\6\174\34\0"+
    "\1\176\7\0\1\176\2\0\2\176\16\0\36\70\1\0"+
    "\21\70\1\0\6\70\36\71\1\0\13\71\1\0\3\71"+
    "\3\0\6\71\7\25\1\177\25\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\23\25\1\200\11\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\24\25\1\114"+
    "\10\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\5\25\1\201\27\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\7\25\1\202\25\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\25\25\1\203\7\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\15\25\1\204"+
    "\17\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\3\25\1\205\14\25\1\206\14\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\12\25\1\207\22\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\3\25\1\205"+
    "\31\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\21\25\1\210\13\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\23\25\1\177\11\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\5\25\1\211\27\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\6\25\1\212"+
    "\26\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\31\25\1\213\3\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\26\25\1\76\6\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\5\25\1\136\2\25\1\136"+
    "\24\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\3\25\1\212\31\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\15\25\1\214\17\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\3\25\1\215\3\25\1\216"+
    "\15\25\1\217\7\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\1\25\1\220\33\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\1\25\1\220\1\25\1\220"+
    "\6\25\1\221\4\25\1\220\15\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\20\25\1\222\14\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\20\25\1\136"+
    "\14\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\3\25\1\136\14\25\1\136\14\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\13\25\1\136\21\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\15\25\1\136"+
    "\17\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\12\25\1\136\22\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\12\25\1\136\2\25\1\136\17\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\3\25\1\136"+
    "\1\25\1\136\4\25\1\136\22\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\12\25\1\223\22\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\32\25\1\202"+
    "\2\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\24\25\1\224\10\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\22\25\1\225\12\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\15\25\1\226\17\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\1\25\1\210"+
    "\33\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\12\25\1\227\22\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\3\25\1\215\31\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\20\25\1\230\14\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\4\25\1\230"+
    "\2\25\1\231\25\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\14\25\1\232\20\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\20\25\1\233\14\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\14\25\1\177"+
    "\20\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\20\25\1\234\2\25\1\205\11\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\23\25\1\235\11\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\12\25\1\236"+
    "\22\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\30\25\1\224\4\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\25\25\1\237\7\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\15\25\1\240\17\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\3\25\1\241"+
    "\15\25\1\210\6\25\1\224\4\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\5\25\1\242\27\25\4\0"+
    "\1\25\2\0\6\25\1\0\1\25\13\0\6\25\1\213"+
    "\26\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\3\25\1\241\2\25\1\177\26\25\4\0\1\25\2\0"+
    "\6\25\1\0\1\25\13\0\15\25\1\243\1\25\1\244"+
    "\15\25\4\0\1\25\2\0\6\25\1\0\1\25\13\0"+
    "\17\25\1\245\15\25\4\0\1\25\2\0\6\25\1\0"+
    "\1\25\13\0\35\10\4\0\1\10\2\0\1\166\2\10"+
    "\2\166\1\10\1\0\1\10\60\0\1\172\21\0\14\25"+
    "\1\202\20\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\20\25\1\206\14\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\20\25\1\177\14\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\12\25\1\246\22\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\31\25"+
    "\1\243\3\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\14\25\1\247\20\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\24\25\1\247\10\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\21\25\1\250\6\25"+
    "\1\250\4\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\2\25\1\103\32\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\5\25\1\177\27\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\23\25\1\251\11\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\15\25"+
    "\1\252\17\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\20\25\1\252\14\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\30\25\1\247\4\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\2\25\1\177\32\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\21\25"+
    "\1\245\13\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\15\25\1\243\17\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\17\25\1\243\15\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\22\25\1\250\12\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\26\25"+
    "\1\253\6\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\15\25\1\245\17\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\12\25\1\245\22\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\14\25\1\254\20\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\15\25"+
    "\1\250\17\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\20\25\1\250\14\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0\1\25\1\246\33\25\4\0\1\25"+
    "\2\0\6\25\1\0\1\25\13\0\15\25\1\177\17\25"+
    "\4\0\1\25\2\0\6\25\1\0\1\25\13\0\20\25"+
    "\1\245\14\25\4\0\1\25\2\0\6\25\1\0\1\25"+
    "\13\0\12\25\1\250\22\25\4\0\1\25\2\0\6\25"+
    "\1\0\1\25\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\5\1\1\11\1\1\1\11\30\1\1\11"+
    "\4\1\2\11\1\1\1\11\1\1\6\11\2\1\1\11"+
    "\77\1\1\0\1\1\1\0\1\11\57\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[172];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Xas99Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          { return Xas99Types.DIR_S;
          }
        case 50: break;
        case 48: 
          { return Xas99Types.INSTR_VIII_I;
          }
        case 51: break;
        case 43: 
          { return Xas99Types.DIR_ES;
          }
        case 52: break;
        case 47: 
          { return Xas99Types.INSTR_VIII_R;
          }
        case 53: break;
        case 6: 
          { return Xas99Types.OP_COLON;
          }
        case 54: break;
        case 38: 
          { return Xas99Types.INSTR_V;
          }
        case 55: break;
        case 7: 
          { yybegin(MNEMONIC); return TokenType.WHITE_SPACE;
          }
        case 56: break;
        case 46: 
          { return Xas99Types.INSTR_IV;
          }
        case 57: break;
        case 18: 
          { return TokenType.WHITE_SPACE;
          }
        case 58: break;
        case 19: 
          { return Xas99Types.OP_AT;
          }
        case 59: break;
        case 27: 
          { return Xas99Types.PP_SEP;
          }
        case 60: break;
        case 2: 
          { return Xas99Types.IDENT;
          }
        case 61: break;
        case 16: 
          { return Xas99Types.OP_SEP;
          }
        case 62: break;
        case 4: 
          { yybegin(YYINITIAL); return Xas99Types.CRLF;
          }
        case 63: break;
        case 39: 
          { return Xas99Types.DIR_L;
          }
        case 64: break;
        case 26: 
          { return Xas99Types.PP_ARG;
          }
        case 65: break;
        case 25: 
          { yybegin(YYINITIAL); return Xas99Types.COMMENT;
          }
        case 66: break;
        case 8: 
          { return Xas99Types.INSTR_I;
          }
        case 67: break;
        case 49: 
          { return Xas99Types.DIR_EO;
          }
        case 68: break;
        case 33: 
          { return Xas99Types.TEXT;
          }
        case 69: break;
        case 21: 
          { return Xas99Types.OP_MINUS;
          }
        case 70: break;
        case 13: 
          { return Xas99Types.INT;
          }
        case 71: break;
        case 29: 
          { return Xas99Types.INSTR_II;
          }
        case 72: break;
        case 42: 
          { yybegin(MNEMONICO); return Xas99Types.DIR_O;
          }
        case 73: break;
        case 34: 
          { return Xas99Types.PP_PARAM;
          }
        case 74: break;
        case 44: 
          { yybegin(MNEMONICO); return Xas99Types.DIR_X;
          }
        case 75: break;
        case 17: 
          { return Xas99Types.OP_LC;
          }
        case 76: break;
        case 23: 
          { return Xas99Types.OP_LPAREN;
          }
        case 77: break;
        case 12: 
          { yybegin(COMMENT); return TokenType.WHITE_SPACE;
          }
        case 78: break;
        case 37: 
          { return Xas99Types.INSTR_IX;
          }
        case 79: break;
        case 28: 
          { return Xas99Types.INSTR_VIII;
          }
        case 80: break;
        case 24: 
          { return Xas99Types.OP_RPAREN;
          }
        case 81: break;
        case 35: 
          { return Xas99Types.DIR_E;
          }
        case 82: break;
        case 20: 
          { return Xas99Types.OP_PLUS;
          }
        case 83: break;
        case 32: 
          { return Xas99Types.REGISTER;
          }
        case 84: break;
        case 11: 
          { yybegin(ARGUMENTS); return TokenType.WHITE_SPACE;
          }
        case 85: break;
        case 15: 
          { return Xas99Types.OP_MISC;
          }
        case 86: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 87: break;
        case 31: 
          { yybegin(PREPROC); return Xas99Types.PREP;
          }
        case 88: break;
        case 10: 
          { yybegin(COMMENT); return Xas99Types.UNKNOWN;
          }
        case 89: break;
        case 30: 
          { yybegin(MNEMONICO); return Xas99Types.INSTR_O;
          }
        case 90: break;
        case 22: 
          { return Xas99Types.OP_NOT;
          }
        case 91: break;
        case 5: 
          { return Xas99Types.COMMENT;
          }
        case 92: break;
        case 3: 
          { return Xas99Types.LCOMMENT;
          }
        case 93: break;
        case 36: 
          { return Xas99Types.INSTR_III;
          }
        case 94: break;
        case 40: 
          { return Xas99Types.INSTR_IX_X;
          }
        case 95: break;
        case 45: 
          { yybegin(MNEMONICO); return Xas99Types.INSTR_VII;
          }
        case 96: break;
        case 9: 
          { return Xas99Types.INSTR_VI;
          }
        case 97: break;
        case 14: 
          { return Xas99Types.OP_AST;
          }
        case 98: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
