/* The following code was generated by JFlex 1.4.3 on 9/13/15 5:24 PM */

package net.endlos.xdt99.xas99;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import net.endlos.xdt99.xas99.psi.Xas99Types;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/13/15 5:24 PM from the specification file
 * <tt>/home/ralph/ti99/xdt99/ide/idea/src/net/endlos/xdt99/xas99/Xas99.flex</tt>
 */
class Xas99Lexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ARGUMENTS = 6;
  public static final int MNEMONIC = 2;
  public static final int YYINITIAL = 0;
  public static final int PREPROC = 10;
  public static final int COMMENT = 8;
  public static final int MNEMONICO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\55\1\56\2\0\1\35\22\0\1\54\1\37\1\45\1\0"+
    "\1\52\1\51\1\53\1\44\1\64\1\65\1\34\1\61\1\57\1\62"+
    "\1\33\1\53\1\43\1\47\4\50\4\46\1\42\1\36\2\0\1\41"+
    "\1\0\1\60\1\1\1\2\1\3\1\24\1\12\1\30\1\14\1\16"+
    "\1\26\1\11\1\27\1\17\1\4\1\21\1\5\1\20\1\13\1\23"+
    "\1\7\1\15\1\32\1\6\1\25\1\22\1\31\1\10\3\0\1\53"+
    "\1\40\1\0\1\1\1\2\1\3\1\24\1\12\1\30\1\14\1\16"+
    "\1\26\1\11\1\27\1\17\1\4\1\21\1\5\1\20\1\13\1\23"+
    "\1\7\1\15\1\32\1\6\1\25\1\22\1\31\1\10\1\0\1\53"+
    "\1\0\1\63\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\2\1\6"+
    "\1\7\1\4\1\10\1\11\1\10\3\12\1\10\6\12"+
    "\1\11\4\12\1\1\1\12\1\13\1\14\1\2\1\15"+
    "\2\1\1\16\2\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\10"+
    "\2\12\1\33\1\12\1\11\1\12\1\10\11\12\1\10"+
    "\12\12\2\34\4\12\1\34\6\12\1\33\7\12\1\35"+
    "\10\12\2\0\2\36\2\16\1\0\1\37\1\0\1\37"+
    "\1\11\1\12\1\40\2\12\1\41\4\12\1\10\1\42"+
    "\4\12\1\43\3\12\1\44\6\12\1\35\1\45\4\12"+
    "\1\11\2\12\1\46\1\12\1\47\3\0\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\12\6\0\1\57"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0144\0\u0288\0\u0144\0\u02be"+
    "\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e"+
    "\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0144\0\u0798"+
    "\0\u07ce\0\u0804\0\u083a\0\u0870\0\u0144\0\u0144\0\u072c\0\u0144"+
    "\0\u0144\0\u0144\0\u0144\0\u0144\0\u0144\0\u0144\0\u08a6\0\u08dc"+
    "\0\u0912\0\u0948\0\u097e\0\u03cc\0\u09b4\0\u09ea\0\u0a20\0\u03cc"+
    "\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0"+
    "\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80"+
    "\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30"+
    "\0\u0f66\0\u0f9c\0\u03cc\0\u0fd2\0\u1008\0\u103e\0\u1074\0\u10aa"+
    "\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u125a"+
    "\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a"+
    "\0\u1440\0\u1476\0\u14ac\0\u14e2\0\u017a\0\u1518\0\u0798\0\u07ce"+
    "\0\u083a\0\u154e\0\u0870\0\u0144\0\u03cc\0\u1584\0\u03cc\0\u15ba"+
    "\0\u15f0\0\u03cc\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe\0\u03cc"+
    "\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u03cc\0\u180c\0\u1842\0\u1878"+
    "\0\u03cc\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986\0\u19bc\0\u03cc"+
    "\0\u03cc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u03cc\0\u1b6c\0\u03cc\0\u1ba2\0\u1bd8\0\u1c0e\0\u03cc\0\u03cc"+
    "\0\u03cc\0\u03cc\0\u03cc\0\u03cc\0\u03cc\0\u1c44\0\u1c7a\0\u1cb0"+
    "\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u0144\0\u1dbe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\32\10\1\7\1\11\1\12\1\13\1\14\1\10"+
    "\1\7\1\15\11\7\2\16\1\17\10\7\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\25\1\27\1\30"+
    "\2\25\1\31\1\25\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\25\1\40\3\25\1\41\1\42\1\7\1\12"+
    "\1\13\1\43\1\25\13\7\2\44\1\17\44\7\1\12"+
    "\1\13\15\7\2\45\1\17\10\7\22\10\1\46\7\10"+
    "\1\7\1\47\1\12\1\13\1\14\1\10\1\50\1\51"+
    "\1\52\1\53\1\54\3\52\1\55\1\56\1\55\1\57"+
    "\1\45\1\17\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\35\67\1\12\1\13\17\67\1\17\7\67\35\70"+
    "\1\12\1\13\17\70\1\17\7\70\66\0\34\10\4\0"+
    "\1\10\2\0\7\10\14\0\35\11\1\0\20\11\1\0"+
    "\7\11\56\0\1\17\7\0\35\13\1\0\20\13\1\0"+
    "\7\13\34\10\3\0\1\14\1\10\2\0\7\10\70\0"+
    "\2\16\10\0\2\25\1\71\2\25\1\72\13\25\1\73"+
    "\4\25\1\74\5\25\4\0\1\25\2\0\7\25\14\0"+
    "\7\25\1\75\2\25\1\75\4\25\1\76\11\25\1\77"+
    "\2\25\4\0\1\25\2\0\7\25\14\0\2\25\1\100"+
    "\2\25\1\101\1\25\1\102\1\103\1\25\1\104\4\25"+
    "\1\105\6\25\1\74\1\106\4\25\4\0\1\25\2\0"+
    "\7\25\14\0\5\25\1\107\12\25\1\110\13\25\4\0"+
    "\1\25\2\0\7\25\14\0\23\25\1\111\10\25\4\0"+
    "\1\25\2\0\7\25\14\0\34\25\4\0\1\25\2\0"+
    "\7\25\14\0\2\25\1\112\2\25\1\113\2\25\1\113"+
    "\1\25\1\114\2\25\1\115\1\25\1\116\3\25\1\117"+
    "\1\25\1\120\6\25\4\0\1\25\2\0\7\25\14\0"+
    "\4\25\1\121\1\122\4\25\1\123\1\25\1\124\1\25"+
    "\1\125\1\126\1\25\1\127\12\25\4\0\1\25\2\0"+
    "\7\25\14\0\6\25\1\130\4\25\1\131\5\25\1\132"+
    "\12\25\4\0\1\25\2\0\7\25\14\0\2\25\1\133"+
    "\7\25\1\134\13\25\1\135\5\25\4\0\1\25\2\0"+
    "\7\25\14\0\5\25\1\136\15\25\1\137\1\140\1\141"+
    "\1\142\5\25\4\0\1\25\2\0\7\25\14\0\1\25"+
    "\1\143\5\25\1\102\2\25\1\104\21\25\4\0\1\25"+
    "\2\0\7\25\14\0\5\25\1\144\4\25\1\145\21\25"+
    "\4\0\1\25\2\0\7\25\14\0\5\25\1\146\26\25"+
    "\4\0\1\25\2\0\7\25\14\0\5\25\1\147\1\25"+
    "\1\150\2\25\1\151\2\25\1\152\16\25\4\0\1\25"+
    "\2\0\7\25\14\0\1\25\1\153\3\25\1\72\1\25"+
    "\1\102\2\25\1\154\7\25\1\155\3\25\1\156\5\25"+
    "\4\0\1\25\2\0\7\25\14\0\2\25\1\157\16\25"+
    "\1\160\2\25\1\161\7\25\4\0\1\25\2\0\7\25"+
    "\14\0\21\25\1\162\12\25\4\0\1\25\2\0\7\25"+
    "\26\0\1\163\13\0\1\164\37\0\34\25\3\0\1\43"+
    "\1\25\2\0\7\25\70\0\2\44\64\0\2\45\10\0"+
    "\34\10\4\0\1\10\2\0\1\165\2\10\1\165\1\166"+
    "\1\165\1\10\15\0\3\167\6\0\1\167\11\0\1\167"+
    "\3\0\1\167\12\0\1\167\2\0\3\167\60\0\1\170"+
    "\3\0\1\170\61\0\1\52\2\0\3\52\15\0\35\171"+
    "\1\0\6\171\1\172\11\171\1\0\7\171\35\173\1\0"+
    "\7\173\1\174\10\173\1\0\7\173\35\67\1\0\20\67"+
    "\1\0\7\67\35\70\1\0\20\70\1\0\7\70\7\25"+
    "\1\175\24\25\4\0\1\25\2\0\7\25\14\0\23\25"+
    "\1\176\10\25\4\0\1\25\2\0\7\25\14\0\24\25"+
    "\1\111\7\25\4\0\1\25\2\0\7\25\14\0\7\25"+
    "\1\177\24\25\4\0\1\25\2\0\7\25\14\0\25\25"+
    "\1\200\6\25\4\0\1\25\2\0\7\25\14\0\15\25"+
    "\1\201\16\25\4\0\1\25\2\0\7\25\14\0\3\25"+
    "\1\202\14\25\1\203\13\25\4\0\1\25\2\0\7\25"+
    "\14\0\12\25\1\204\21\25\4\0\1\25\2\0\7\25"+
    "\14\0\3\25\1\202\30\25\4\0\1\25\2\0\7\25"+
    "\14\0\21\25\1\205\12\25\4\0\1\25\2\0\7\25"+
    "\14\0\23\25\1\175\10\25\4\0\1\25\2\0\7\25"+
    "\14\0\5\25\1\206\26\25\4\0\1\25\2\0\7\25"+
    "\14\0\6\25\1\207\25\25\4\0\1\25\2\0\7\25"+
    "\14\0\31\25\1\210\2\25\4\0\1\25\2\0\7\25"+
    "\14\0\26\25\1\74\5\25\4\0\1\25\2\0\7\25"+
    "\14\0\5\25\1\133\2\25\1\133\23\25\4\0\1\25"+
    "\2\0\7\25\14\0\3\25\1\207\30\25\4\0\1\25"+
    "\2\0\7\25\14\0\15\25\1\211\16\25\4\0\1\25"+
    "\2\0\7\25\14\0\3\25\1\212\3\25\1\213\15\25"+
    "\1\214\6\25\4\0\1\25\2\0\7\25\14\0\1\25"+
    "\1\215\32\25\4\0\1\25\2\0\7\25\14\0\1\25"+
    "\1\215\1\25\1\215\6\25\1\216\4\25\1\215\14\25"+
    "\4\0\1\25\2\0\7\25\14\0\20\25\1\217\13\25"+
    "\4\0\1\25\2\0\7\25\14\0\20\25\1\133\13\25"+
    "\4\0\1\25\2\0\7\25\14\0\3\25\1\133\14\25"+
    "\1\133\13\25\4\0\1\25\2\0\7\25\14\0\13\25"+
    "\1\133\20\25\4\0\1\25\2\0\7\25\14\0\15\25"+
    "\1\133\16\25\4\0\1\25\2\0\7\25\14\0\12\25"+
    "\1\133\21\25\4\0\1\25\2\0\7\25\14\0\12\25"+
    "\1\133\2\25\1\133\16\25\4\0\1\25\2\0\7\25"+
    "\14\0\3\25\1\133\1\25\1\133\4\25\1\133\21\25"+
    "\4\0\1\25\2\0\7\25\14\0\12\25\1\220\21\25"+
    "\4\0\1\25\2\0\7\25\14\0\32\25\1\177\1\25"+
    "\4\0\1\25\2\0\7\25\14\0\24\25\1\221\7\25"+
    "\4\0\1\25\2\0\7\25\14\0\22\25\1\222\11\25"+
    "\4\0\1\25\2\0\7\25\14\0\15\25\1\223\16\25"+
    "\4\0\1\25\2\0\7\25\14\0\1\25\1\205\32\25"+
    "\4\0\1\25\2\0\7\25\14\0\12\25\1\224\21\25"+
    "\4\0\1\25\2\0\7\25\14\0\3\25\1\212\30\25"+
    "\4\0\1\25\2\0\7\25\14\0\20\25\1\225\13\25"+
    "\4\0\1\25\2\0\7\25\14\0\4\25\1\225\2\25"+
    "\1\226\24\25\4\0\1\25\2\0\7\25\14\0\14\25"+
    "\1\227\17\25\4\0\1\25\2\0\7\25\14\0\20\25"+
    "\1\230\13\25\4\0\1\25\2\0\7\25\14\0\14\25"+
    "\1\175\17\25\4\0\1\25\2\0\7\25\14\0\20\25"+
    "\1\231\2\25\1\202\10\25\4\0\1\25\2\0\7\25"+
    "\14\0\23\25\1\232\10\25\4\0\1\25\2\0\7\25"+
    "\14\0\12\25\1\233\21\25\4\0\1\25\2\0\7\25"+
    "\14\0\30\25\1\221\3\25\4\0\1\25\2\0\7\25"+
    "\14\0\25\25\1\234\6\25\4\0\1\25\2\0\7\25"+
    "\14\0\15\25\1\235\16\25\4\0\1\25\2\0\7\25"+
    "\14\0\3\25\1\236\15\25\1\205\6\25\1\221\3\25"+
    "\4\0\1\25\2\0\7\25\14\0\5\25\1\237\26\25"+
    "\4\0\1\25\2\0\7\25\14\0\6\25\1\210\25\25"+
    "\4\0\1\25\2\0\7\25\14\0\31\25\1\240\2\25"+
    "\4\0\1\25\2\0\7\25\14\0\3\25\1\236\2\25"+
    "\1\175\25\25\4\0\1\25\2\0\7\25\14\0\15\25"+
    "\1\241\1\25\1\242\14\25\4\0\1\25\2\0\7\25"+
    "\14\0\17\25\1\243\14\25\4\0\1\25\2\0\7\25"+
    "\33\0\1\244\1\0\1\245\74\0\1\246\35\0\34\10"+
    "\4\0\1\10\2\0\1\165\3\10\2\165\1\10\60\0"+
    "\1\171\21\0\14\25\1\177\17\25\4\0\1\25\2\0"+
    "\7\25\14\0\20\25\1\175\13\25\4\0\1\25\2\0"+
    "\7\25\14\0\12\25\1\247\21\25\4\0\1\25\2\0"+
    "\7\25\14\0\31\25\1\241\2\25\4\0\1\25\2\0"+
    "\7\25\14\0\14\25\1\250\17\25\4\0\1\25\2\0"+
    "\7\25\14\0\24\25\1\250\7\25\4\0\1\25\2\0"+
    "\7\25\14\0\21\25\1\251\6\25\1\251\3\25\4\0"+
    "\1\25\2\0\7\25\14\0\2\25\1\100\31\25\4\0"+
    "\1\25\2\0\7\25\14\0\5\25\1\175\26\25\4\0"+
    "\1\25\2\0\7\25\14\0\23\25\1\252\10\25\4\0"+
    "\1\25\2\0\7\25\14\0\15\25\1\253\16\25\4\0"+
    "\1\25\2\0\7\25\14\0\20\25\1\253\13\25\4\0"+
    "\1\25\2\0\7\25\14\0\30\25\1\250\3\25\4\0"+
    "\1\25\2\0\7\25\14\0\2\25\1\175\31\25\4\0"+
    "\1\25\2\0\7\25\14\0\21\25\1\243\12\25\4\0"+
    "\1\25\2\0\7\25\14\0\15\25\1\241\16\25\4\0"+
    "\1\25\2\0\7\25\14\0\17\25\1\241\14\25\4\0"+
    "\1\25\2\0\7\25\14\0\22\25\1\251\11\25\4\0"+
    "\1\25\2\0\7\25\14\0\26\25\1\254\5\25\4\0"+
    "\1\25\2\0\7\25\14\0\15\25\1\243\16\25\4\0"+
    "\1\25\2\0\7\25\14\0\12\25\1\243\21\25\4\0"+
    "\1\25\2\0\7\25\14\0\14\25\1\255\17\25\4\0"+
    "\1\25\2\0\7\25\14\0\15\25\1\251\16\25\4\0"+
    "\1\25\2\0\7\25\14\0\20\25\1\251\13\25\4\0"+
    "\1\25\2\0\7\25\14\0\1\25\1\247\32\25\4\0"+
    "\1\25\2\0\7\25\14\0\15\25\1\175\16\25\4\0"+
    "\1\25\2\0\7\25\14\0\20\25\1\243\13\25\4\0"+
    "\1\25\2\0\7\25\14\0\15\25\1\256\16\25\4\0"+
    "\1\25\2\0\7\25\14\0\12\25\1\251\21\25\4\0"+
    "\1\25\2\0\7\25\23\0\1\257\102\0\1\260\53\0"+
    "\1\261\1\0\1\262\4\0\1\263\2\0\1\264\41\0"+
    "\12\25\1\241\21\25\4\0\1\25\2\0\7\25\26\0"+
    "\1\265\101\0\1\266\52\0\1\265\64\0\1\265\2\0"+
    "\1\265\62\0\1\265\11\0\1\264\53\0\1\266\103\0"+
    "\1\265\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7668];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\5\1\1\11\1\1\1\11\27\1\1\11"+
    "\5\1\2\11\1\1\7\11\74\1\2\0\4\1\1\0"+
    "\1\1\1\0\1\11\47\1\3\0\10\1\6\0\1\11"+
    "\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Xas99Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 38: 
          { return Xas99Types.DIR_S;
          }
        case 48: break;
        case 45: 
          { return Xas99Types.INSTR_VIII_I;
          }
        case 49: break;
        case 40: 
          { return Xas99Types.DIR_ES;
          }
        case 50: break;
        case 44: 
          { return Xas99Types.INSTR_VIII_R;
          }
        case 51: break;
        case 6: 
          { return Xas99Types.OP_COLON;
          }
        case 52: break;
        case 35: 
          { return Xas99Types.INSTR_V;
          }
        case 53: break;
        case 7: 
          { yybegin(MNEMONIC); return TokenType.WHITE_SPACE;
          }
        case 54: break;
        case 43: 
          { return Xas99Types.INSTR_IV;
          }
        case 55: break;
        case 17: 
          { return TokenType.WHITE_SPACE;
          }
        case 56: break;
        case 19: 
          { return Xas99Types.OP_AT;
          }
        case 57: break;
        case 2: 
          { return Xas99Types.IDENT;
          }
        case 58: break;
        case 18: 
          { return Xas99Types.OP_SEP;
          }
        case 59: break;
        case 4: 
          { yybegin(YYINITIAL); return Xas99Types.CRLF;
          }
        case 60: break;
        case 36: 
          { return Xas99Types.DIR_L;
          }
        case 61: break;
        case 25: 
          { yybegin(YYINITIAL); return Xas99Types.COMMENT;
          }
        case 62: break;
        case 8: 
          { return Xas99Types.INSTR_I;
          }
        case 63: break;
        case 26: 
          { return Xas99Types.PREP_ARG;
          }
        case 64: break;
        case 46: 
          { return Xas99Types.DIR_EO;
          }
        case 65: break;
        case 31: 
          { return Xas99Types.TEXT;
          }
        case 66: break;
        case 21: 
          { return Xas99Types.OP_MINUS;
          }
        case 67: break;
        case 14: 
          { return Xas99Types.INT;
          }
        case 68: break;
        case 28: 
          { return Xas99Types.INSTR_II;
          }
        case 69: break;
        case 39: 
          { yybegin(MNEMONICO); return Xas99Types.DIR_O;
          }
        case 70: break;
        case 41: 
          { yybegin(MNEMONICO); return Xas99Types.DIR_X;
          }
        case 71: break;
        case 16: 
          { return Xas99Types.OP_LC;
          }
        case 72: break;
        case 23: 
          { return Xas99Types.OP_LPAREN;
          }
        case 73: break;
        case 12: 
          { yybegin(COMMENT); return TokenType.WHITE_SPACE;
          }
        case 74: break;
        case 27: 
          { return Xas99Types.INSTR_VIII;
          }
        case 75: break;
        case 34: 
          { return Xas99Types.INSTR_IX;
          }
        case 76: break;
        case 24: 
          { return Xas99Types.OP_RPAREN;
          }
        case 77: break;
        case 32: 
          { return Xas99Types.DIR_E;
          }
        case 78: break;
        case 20: 
          { return Xas99Types.OP_PLUS;
          }
        case 79: break;
        case 30: 
          { return Xas99Types.REGISTER;
          }
        case 80: break;
        case 11: 
          { yybegin(ARGUMENTS); return TokenType.WHITE_SPACE;
          }
        case 81: break;
        case 15: 
          { return Xas99Types.OP_MISC;
          }
        case 82: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 83: break;
        case 47: 
          { yybegin(PREPROC); return Xas99Types.PREP;
          }
        case 84: break;
        case 10: 
          { yybegin(COMMENT); return Xas99Types.UNKNOWN;
          }
        case 85: break;
        case 29: 
          { yybegin(MNEMONICO); return Xas99Types.INSTR_O;
          }
        case 86: break;
        case 22: 
          { return Xas99Types.OP_NOT;
          }
        case 87: break;
        case 5: 
          { return Xas99Types.COMMENT;
          }
        case 88: break;
        case 3: 
          { return Xas99Types.LCOMMENT;
          }
        case 89: break;
        case 33: 
          { return Xas99Types.INSTR_III;
          }
        case 90: break;
        case 37: 
          { return Xas99Types.INSTR_IX_X;
          }
        case 91: break;
        case 42: 
          { yybegin(MNEMONICO); return Xas99Types.INSTR_VII;
          }
        case 92: break;
        case 9: 
          { return Xas99Types.INSTR_VI;
          }
        case 93: break;
        case 13: 
          { return Xas99Types.OP_AST;
          }
        case 94: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
