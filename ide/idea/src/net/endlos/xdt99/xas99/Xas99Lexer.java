/* The following code was generated by JFlex 1.4.3 on 8/13/15 7:47 PM */

package net.endlos.xdt99.xas99;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import net.endlos.xdt99.xas99.psi.Xas99Types;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/13/15 7:47 PM from the specification file
 * <tt>/home/ralph/prj/ti99/xdt99/ide/idea/src/net/endlos/xdt99/xas99/Xas99.flex</tt>
 */
class Xas99Lexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ARGUMENTS = 6;
  public static final int MNEMONIC = 2;
  public static final int YYINITIAL = 0;
  public static final int PREPROC = 10;
  public static final int COMMENT = 8;
  public static final int MNEMONICO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\53\1\54\2\0\1\35\22\0\1\52\1\0\1\43\1\0"+
    "\1\50\1\47\1\51\1\42\1\62\1\63\1\34\1\57\1\55\1\60"+
    "\1\33\1\51\1\41\1\45\4\46\4\44\1\40\1\36\2\0\1\37"+
    "\1\0\1\56\1\1\1\2\1\3\1\24\1\12\1\30\1\14\1\16"+
    "\1\26\1\11\1\27\1\17\1\4\1\21\1\5\1\20\1\13\1\23"+
    "\1\7\1\15\1\32\1\6\1\25\1\22\1\31\1\10\3\0\1\51"+
    "\2\0\1\1\1\2\1\3\1\24\1\12\1\30\1\14\1\16\1\26"+
    "\1\11\1\27\1\17\1\4\1\21\1\5\1\20\1\13\1\23\1\7"+
    "\1\15\1\32\1\6\1\25\1\22\1\31\1\10\1\0\1\51\1\0"+
    "\1\61\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\6\1\4"+
    "\1\7\1\10\1\7\3\11\1\7\6\11\1\10\4\11"+
    "\1\1\1\12\1\13\1\2\1\14\2\1\1\15\2\1"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\7\2\11\1\32\1\11"+
    "\1\10\1\11\1\7\11\11\1\7\12\11\2\33\4\11"+
    "\1\33\6\11\1\32\7\11\1\34\10\11\2\0\2\35"+
    "\2\15\1\0\1\36\1\0\1\36\1\10\1\11\1\37"+
    "\2\11\1\40\4\11\1\7\1\41\4\11\1\42\3\11"+
    "\1\43\6\11\1\34\1\44\2\11\1\45\2\11\1\10"+
    "\2\11\1\46\1\11\3\0\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\11\6\0\1\56\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0138\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618"+
    "\0\u064c\0\u0680\0\u06b4\0\u0138\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u07b8\0\u0138\0\u0138\0\u0680\0\u0138\0\u0138\0\u0138\0\u0138"+
    "\0\u0138\0\u0138\0\u0138\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc"+
    "\0\u0374\0\u08f0\0\u0924\0\u0958\0\u0374\0\u098c\0\u09c0\0\u09f4"+
    "\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94"+
    "\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34"+
    "\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0374"+
    "\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040"+
    "\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0"+
    "\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380"+
    "\0\u13b4\0\u016c\0\u13e8\0\u06e8\0\u071c\0\u0784\0\u141c\0\u07b8"+
    "\0\u0138\0\u0374\0\u1450\0\u0374\0\u1484\0\u14b8\0\u0374\0\u14ec"+
    "\0\u1520\0\u1554\0\u1588\0\u15bc\0\u0374\0\u15f0\0\u1624\0\u1658"+
    "\0\u168c\0\u0374\0\u16c0\0\u16f4\0\u1728\0\u0374\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u0374\0\u0374\0\u1894\0\u18c8"+
    "\0\u0374\0\u18fc\0\u1930\0\u1964\0\u1998\0\u19cc\0\u0374\0\u1a00"+
    "\0\u1a34\0\u1a68\0\u1a9c\0\u0374\0\u0374\0\u0374\0\u0374\0\u0374"+
    "\0\u0374\0\u0374\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4"+
    "\0\u1c08\0\u0138\0\u1c3c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\32\10\1\7\1\11\1\12\1\13\13\7\2\14"+
    "\1\15\10\7\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\23\1\25\1\26\2\23\1\27\1\23\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\23\1\36\3\23"+
    "\1\37\1\40\1\7\1\12\1\13\13\7\2\41\1\15"+
    "\44\7\1\12\1\13\13\7\2\42\1\15\10\7\22\10"+
    "\1\43\7\10\1\7\1\44\1\12\1\13\1\45\1\46"+
    "\1\47\1\50\1\51\3\47\1\52\1\53\1\52\1\54"+
    "\1\42\1\15\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\35\64\1\12\1\13\15\64\1\15\7\64\35\65"+
    "\1\12\1\13\15\65\1\15\7\65\64\0\34\10\5\0"+
    "\7\10\14\0\35\11\1\0\16\11\1\0\7\11\54\0"+
    "\1\15\7\0\35\13\1\0\16\13\1\0\7\13\52\0"+
    "\2\14\10\0\2\23\1\66\2\23\1\67\13\23\1\70"+
    "\4\23\1\71\5\23\5\0\7\23\14\0\7\23\1\72"+
    "\2\23\1\72\4\23\1\73\11\23\1\74\2\23\5\0"+
    "\7\23\14\0\2\23\1\75\2\23\1\76\1\23\1\77"+
    "\1\100\1\23\1\101\4\23\1\102\6\23\1\71\1\103"+
    "\4\23\5\0\7\23\14\0\5\23\1\104\12\23\1\105"+
    "\13\23\5\0\7\23\14\0\23\23\1\106\10\23\5\0"+
    "\7\23\14\0\34\23\5\0\7\23\14\0\2\23\1\107"+
    "\2\23\1\110\2\23\1\110\1\23\1\111\2\23\1\112"+
    "\1\23\1\113\3\23\1\114\1\23\1\115\6\23\5\0"+
    "\7\23\14\0\4\23\1\116\1\117\4\23\1\120\1\23"+
    "\1\121\1\23\1\122\1\123\1\23\1\124\12\23\5\0"+
    "\7\23\14\0\6\23\1\125\4\23\1\126\5\23\1\127"+
    "\12\23\5\0\7\23\14\0\2\23\1\130\7\23\1\131"+
    "\13\23\1\132\5\23\5\0\7\23\14\0\5\23\1\133"+
    "\15\23\1\134\1\135\1\136\1\137\5\23\5\0\7\23"+
    "\14\0\1\23\1\140\5\23\1\77\2\23\1\101\21\23"+
    "\5\0\7\23\14\0\5\23\1\141\4\23\1\142\21\23"+
    "\5\0\7\23\14\0\5\23\1\143\26\23\5\0\7\23"+
    "\14\0\5\23\1\144\1\23\1\145\2\23\1\146\2\23"+
    "\1\147\16\23\5\0\7\23\14\0\1\23\1\150\3\23"+
    "\1\67\1\23\1\77\2\23\1\151\7\23\1\152\3\23"+
    "\1\153\5\23\5\0\7\23\14\0\2\23\1\154\16\23"+
    "\1\155\2\23\1\156\7\23\5\0\7\23\14\0\21\23"+
    "\1\157\12\23\5\0\7\23\26\0\1\160\13\0\1\161"+
    "\107\0\2\41\62\0\2\42\10\0\34\10\5\0\1\162"+
    "\2\10\1\162\1\163\1\162\1\10\15\0\3\164\6\0"+
    "\1\164\11\0\1\164\3\0\1\164\10\0\1\164\2\0"+
    "\3\164\56\0\1\165\3\0\1\165\57\0\1\47\2\0"+
    "\3\47\15\0\35\166\1\0\4\166\1\167\11\166\1\0"+
    "\7\166\35\170\1\0\5\170\1\171\10\170\1\0\7\170"+
    "\35\64\1\0\16\64\1\0\7\64\35\65\1\0\16\65"+
    "\1\0\7\65\7\23\1\172\24\23\5\0\7\23\14\0"+
    "\23\23\1\173\10\23\5\0\7\23\14\0\24\23\1\106"+
    "\7\23\5\0\7\23\14\0\7\23\1\174\24\23\5\0"+
    "\7\23\14\0\25\23\1\175\6\23\5\0\7\23\14\0"+
    "\15\23\1\176\16\23\5\0\7\23\14\0\3\23\1\177"+
    "\14\23\1\200\13\23\5\0\7\23\14\0\12\23\1\201"+
    "\21\23\5\0\7\23\14\0\3\23\1\177\30\23\5\0"+
    "\7\23\14\0\21\23\1\202\12\23\5\0\7\23\14\0"+
    "\23\23\1\172\10\23\5\0\7\23\14\0\5\23\1\203"+
    "\26\23\5\0\7\23\14\0\6\23\1\204\25\23\5\0"+
    "\7\23\14\0\31\23\1\205\2\23\5\0\7\23\14\0"+
    "\26\23\1\71\5\23\5\0\7\23\14\0\5\23\1\130"+
    "\2\23\1\130\23\23\5\0\7\23\14\0\3\23\1\204"+
    "\30\23\5\0\7\23\14\0\15\23\1\206\16\23\5\0"+
    "\7\23\14\0\3\23\1\207\3\23\1\210\15\23\1\211"+
    "\6\23\5\0\7\23\14\0\1\23\1\212\32\23\5\0"+
    "\7\23\14\0\1\23\1\212\1\23\1\212\6\23\1\213"+
    "\4\23\1\212\14\23\5\0\7\23\14\0\20\23\1\214"+
    "\13\23\5\0\7\23\14\0\20\23\1\130\13\23\5\0"+
    "\7\23\14\0\3\23\1\130\14\23\1\130\13\23\5\0"+
    "\7\23\14\0\13\23\1\130\20\23\5\0\7\23\14\0"+
    "\15\23\1\130\16\23\5\0\7\23\14\0\12\23\1\130"+
    "\21\23\5\0\7\23\14\0\12\23\1\130\2\23\1\130"+
    "\16\23\5\0\7\23\14\0\3\23\1\130\1\23\1\130"+
    "\4\23\1\130\21\23\5\0\7\23\14\0\12\23\1\215"+
    "\21\23\5\0\7\23\14\0\32\23\1\174\1\23\5\0"+
    "\7\23\14\0\24\23\1\216\7\23\5\0\7\23\14\0"+
    "\22\23\1\217\11\23\5\0\7\23\14\0\15\23\1\220"+
    "\16\23\5\0\7\23\14\0\1\23\1\202\32\23\5\0"+
    "\7\23\14\0\12\23\1\221\21\23\5\0\7\23\14\0"+
    "\3\23\1\207\30\23\5\0\7\23\14\0\20\23\1\222"+
    "\13\23\5\0\7\23\14\0\4\23\1\222\2\23\1\223"+
    "\24\23\5\0\7\23\14\0\14\23\1\224\17\23\5\0"+
    "\7\23\14\0\20\23\1\225\13\23\5\0\7\23\14\0"+
    "\14\23\1\172\17\23\5\0\7\23\14\0\20\23\1\226"+
    "\2\23\1\177\10\23\5\0\7\23\14\0\23\23\1\227"+
    "\10\23\5\0\7\23\14\0\12\23\1\230\21\23\5\0"+
    "\7\23\14\0\30\23\1\231\3\23\5\0\7\23\14\0"+
    "\25\23\1\232\6\23\5\0\7\23\14\0\15\23\1\233"+
    "\16\23\5\0\7\23\14\0\3\23\1\234\15\23\1\202"+
    "\6\23\1\231\3\23\5\0\7\23\14\0\5\23\1\235"+
    "\26\23\5\0\7\23\14\0\6\23\1\205\25\23\5\0"+
    "\7\23\14\0\31\23\1\236\2\23\5\0\7\23\14\0"+
    "\3\23\1\234\2\23\1\172\25\23\5\0\7\23\14\0"+
    "\15\23\1\237\1\23\1\240\14\23\5\0\7\23\14\0"+
    "\17\23\1\216\14\23\5\0\7\23\33\0\1\241\1\0"+
    "\1\242\72\0\1\243\33\0\34\10\5\0\1\162\3\10"+
    "\2\162\1\10\56\0\1\166\21\0\14\23\1\174\17\23"+
    "\5\0\7\23\14\0\20\23\1\172\13\23\5\0\7\23"+
    "\14\0\12\23\1\244\21\23\5\0\7\23\14\0\31\23"+
    "\1\237\2\23\5\0\7\23\14\0\14\23\1\245\17\23"+
    "\5\0\7\23\14\0\24\23\1\245\7\23\5\0\7\23"+
    "\14\0\21\23\1\246\6\23\1\246\3\23\5\0\7\23"+
    "\14\0\2\23\1\75\31\23\5\0\7\23\14\0\5\23"+
    "\1\172\26\23\5\0\7\23\14\0\23\23\1\247\10\23"+
    "\5\0\7\23\14\0\15\23\1\250\16\23\5\0\7\23"+
    "\14\0\20\23\1\250\13\23\5\0\7\23\14\0\30\23"+
    "\1\245\3\23\5\0\7\23\14\0\2\23\1\172\31\23"+
    "\5\0\7\23\14\0\21\23\1\216\12\23\5\0\7\23"+
    "\14\0\15\23\1\237\16\23\5\0\7\23\14\0\17\23"+
    "\1\237\14\23\5\0\7\23\14\0\22\23\1\246\11\23"+
    "\5\0\7\23\14\0\26\23\1\251\5\23\5\0\7\23"+
    "\14\0\15\23\1\216\16\23\5\0\7\23\14\0\12\23"+
    "\1\216\21\23\5\0\7\23\14\0\14\23\1\252\17\23"+
    "\5\0\7\23\14\0\15\23\1\246\16\23\5\0\7\23"+
    "\14\0\20\23\1\246\13\23\5\0\7\23\14\0\1\23"+
    "\1\244\32\23\5\0\7\23\14\0\15\23\1\172\16\23"+
    "\5\0\7\23\14\0\20\23\1\216\13\23\5\0\7\23"+
    "\14\0\15\23\1\253\16\23\5\0\7\23\14\0\12\23"+
    "\1\246\21\23\5\0\7\23\23\0\1\254\100\0\1\255"+
    "\51\0\1\256\1\0\1\257\4\0\1\260\2\0\1\261"+
    "\37\0\12\23\1\237\21\23\5\0\7\23\26\0\1\262"+
    "\77\0\1\263\50\0\1\262\62\0\1\262\2\0\1\262"+
    "\60\0\1\262\11\0\1\261\51\0\1\263\101\0\1\262"+
    "\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\5\1\1\11\26\1\1\11\5\1\2\11"+
    "\1\1\7\11\74\1\2\0\4\1\1\0\1\1\1\0"+
    "\1\11\47\1\3\0\10\1\6\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[179];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Xas99Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 184) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 38: 
          { return Xas99Types.DIR_S;
          }
        case 47: break;
        case 44: 
          { return Xas99Types.INSTR_VIII_I;
          }
        case 48: break;
        case 39: 
          { return Xas99Types.DIR_ES;
          }
        case 49: break;
        case 43: 
          { return Xas99Types.INSTR_VIII_R;
          }
        case 50: break;
        case 34: 
          { return Xas99Types.INSTR_V;
          }
        case 51: break;
        case 6: 
          { yybegin(MNEMONIC); return TokenType.WHITE_SPACE;
          }
        case 52: break;
        case 42: 
          { return Xas99Types.INSTR_IV;
          }
        case 53: break;
        case 16: 
          { return TokenType.WHITE_SPACE;
          }
        case 54: break;
        case 18: 
          { return Xas99Types.OP_AT;
          }
        case 55: break;
        case 2: 
          { return Xas99Types.IDENT;
          }
        case 56: break;
        case 17: 
          { return Xas99Types.OP_SEP;
          }
        case 57: break;
        case 4: 
          { yybegin(YYINITIAL); return Xas99Types.CRLF;
          }
        case 58: break;
        case 37: 
          { return Xas99Types.DIR_L;
          }
        case 59: break;
        case 24: 
          { yybegin(YYINITIAL); return Xas99Types.COMMENT;
          }
        case 60: break;
        case 7: 
          { return Xas99Types.INSTR_I;
          }
        case 61: break;
        case 25: 
          { return Xas99Types.PREP_ARG;
          }
        case 62: break;
        case 45: 
          { return Xas99Types.DIR_EO;
          }
        case 63: break;
        case 30: 
          { return Xas99Types.TEXT;
          }
        case 64: break;
        case 20: 
          { return Xas99Types.OP_MINUS;
          }
        case 65: break;
        case 13: 
          { return Xas99Types.INT;
          }
        case 66: break;
        case 27: 
          { return Xas99Types.INSTR_II;
          }
        case 67: break;
        case 35: 
          { yybegin(MNEMONICO); return Xas99Types.DIR_O;
          }
        case 68: break;
        case 40: 
          { yybegin(MNEMONICO); return Xas99Types.DIR_X;
          }
        case 69: break;
        case 15: 
          { return Xas99Types.OP_LC;
          }
        case 70: break;
        case 22: 
          { return Xas99Types.OP_LPAREN;
          }
        case 71: break;
        case 11: 
          { yybegin(COMMENT); return TokenType.WHITE_SPACE;
          }
        case 72: break;
        case 26: 
          { return Xas99Types.INSTR_VIII;
          }
        case 73: break;
        case 33: 
          { return Xas99Types.INSTR_IX;
          }
        case 74: break;
        case 23: 
          { return Xas99Types.OP_RPAREN;
          }
        case 75: break;
        case 31: 
          { return Xas99Types.DIR_E;
          }
        case 76: break;
        case 19: 
          { return Xas99Types.OP_PLUS;
          }
        case 77: break;
        case 29: 
          { return Xas99Types.REGISTER;
          }
        case 78: break;
        case 10: 
          { yybegin(ARGUMENTS); return TokenType.WHITE_SPACE;
          }
        case 79: break;
        case 14: 
          { return Xas99Types.OP_MISC;
          }
        case 80: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 81: break;
        case 46: 
          { yybegin(PREPROC); return Xas99Types.PREP;
          }
        case 82: break;
        case 9: 
          { yybegin(COMMENT); return Xas99Types.UNKNOWN;
          }
        case 83: break;
        case 28: 
          { yybegin(MNEMONICO); return Xas99Types.INSTR_O;
          }
        case 84: break;
        case 21: 
          { return Xas99Types.OP_NOT;
          }
        case 85: break;
        case 5: 
          { return Xas99Types.COMMENT;
          }
        case 86: break;
        case 3: 
          { return Xas99Types.LCOMMENT;
          }
        case 87: break;
        case 32: 
          { return Xas99Types.INSTR_III;
          }
        case 88: break;
        case 36: 
          { return Xas99Types.INSTR_IX_X;
          }
        case 89: break;
        case 41: 
          { yybegin(MNEMONICO); return Xas99Types.INSTR_VII;
          }
        case 90: break;
        case 8: 
          { return Xas99Types.INSTR_VI;
          }
        case 91: break;
        case 12: 
          { return Xas99Types.OP_AST;
          }
        case 92: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
