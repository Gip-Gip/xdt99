{
    parserClass="net.endlos.xdt99.xas99.parser.Xas99Parser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Xas99"
    psiImplClassSuffix="Impl"
    psiPackage="net.endlos.xdt99.xas99.psi"
    psiImplPackage="net.endlos.xdt99.xas99.psi.impl"

    elementTypeHolderClass="net.endlos.xdt99.xas99.psi.Xas99Types"
    elementTypeClass="net.endlos.xdt99.xas99.psi.Xas99ElementType"
    tokenTypeClass="net.endlos.xdt99.xas99.psi.Xas99TokenType"

    psiImplUtilClass="net.endlos.xdt99.xas99.psi.impl.Xas99PsiImplUtil"
}

xas99File ::=
    (line CRLF)*
private line ::=
    linecomment | label? statement?

linecomment ::=  // used by folding builder
    LCOMMENT
    {pin=1}

// label
private label ::=
    labeldef OP_COLON?
labeldef ::=
    IDENT
    {mixin="net.endlos.xdt99.xas99.psi.impl.Xas99NamedElementImpl"
     implements="net.endlos.xdt99.xas99.psi.Xas99NamedElement"
     methods=[getName setName getNameIdentifier getPresentation]}

// mnemonics
private statement ::=
    directive | instruction | preprocessor | unknown_mnem
    {recoverWhile="statement_recover"}
private statement_recover ::=
    !CRLF
directive ::=
    DIR_L (opLabel (OP_SEP opLabel)*)? |
    DIR_E expr |
    DIR_EO expr? |
    DIR_ES expr (OP_SEP expr)* |
    DIR_S opText |
    DIR_O |
    DIR_X
    {pin=1}
instruction ::=
    INSTR_I args_I |
    INSTR_II args_II |
    INSTR_III args_III |
    INSTR_IV args_IV |
    INSTR_V args_V |
    INSTR_VI args_VI |
    INSTR_VII |
    INSTR_VIII args_VIII |
    INSTR_VIII_I args_VIII_I |
    INSTR_VIII_R args_VIII_R |
    INSTR_IX args_IX |
    INSTR_IX_X args_IX_X |
    INSTR_O |
    INSTR_9995 args_IX |
    INSTR_F18A_I args_F18A_I |
    INSTR_F18A_II args_F18A_II |
    INSTR_F18A_O
    {pin=1}
preprocessor ::=
    PREP (PP_ARG | PP_SEP)*
    {pin=1}
unknown_mnem ::=
    UNKNOWN
    {pin=1}

// instruction formats
private args_I ::=
    opGA OP_SEP opGA
    {pin="OP_SEP"}
private args_II ::=
    expr
private args_III ::=
    opGA OP_SEP opRegister
    {pin="OP_SEP"}
private args_IV ::=
    opGA OP_SEP opValue
    {pin="OP_SEP"}
private args_V ::=
    opRegister OP_SEP opValue
    {pin="OP_SEP"}
private args_VI ::=
    opGA
private args_VIII ::=
    opRegister OP_SEP opValue
    {pin="OP_SEP"}
private args_VIII_I ::=
    opValue
private args_VIII_R ::=
    opRegister
private args_IX ::=
    opGA OP_SEP opRegister
    {pin="OP_SEP"}
private args_IX_X ::=
    opGA OP_SEP opValue
    {pin="OP_SEP"}
private args_F18A_I ::=
    opGA
private args_F18A_II ::=
    opGA OP_SEP (opGA | opValue)
    {pin="OP_SEP"}

// arguments
opGA ::=
    OP_AT OP_MINUS? sexpr (OP_LPAREN opRegister OP_RPAREN)? |
    opRegister |
    OP_AST opRegister OP_PLUS?
    {name="general address"}
opAddress ::=
    opLabel | OP_LC | LOCAL | PP_PARAM
    {name="address value"}
opValue ::=
    expr
    {name="value"}
opRegister ::=
    REGISTER | INT | PP_PARAM
    {name="register"}
opText ::=
    OP_MINUS? (TEXT | INT | PP_PARAM)
    {name="text"}
opLabel ::=
    IDENT | PP_PARAM
    {methods=[getName setName getNameIdentifier getReference]
     name="label"}

// expressions
expr ::=
    (OP_PLUS | OP_MINUS | OP_NOT) expr |
    term (xop expr)*
    {name="expression"}
private term ::=
    OP_LPAREN expr OP_RPAREN |
    atom
    {name="term"}
private xop ::=
    OP_PLUS | OP_MINUS | OP_AST | OP_MISC
    {name="operator"}
private atom ::=
    opAddress | INT | TEXT
    {name="value"}

sexpr ::=
    (OP_PLUS | OP_MINUS | OP_NOT) sexpr |
    atom (xop sexpr)*
    {name="simple expressions"}

// keep for syntax highlighter
dummy ::=
    COMMENT
